/*
* generated by Xtext
*/
grammar InternalGal;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package fr.lip6.move.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.lip6.move.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.lip6.move.services.GalGrammarAccess;

}

@parser::members {
 
 	private GalGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(GalGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRulePROGRAM
entryRulePROGRAM 
:
{ before(grammarAccess.getPROGRAMRule()); }
	 rulePROGRAM
{ after(grammarAccess.getPROGRAMRule()); } 
	 EOF 
;

// Rule PROGRAM
rulePROGRAM
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPROGRAMAccess().getGroup()); }
(rule__PROGRAM__Group__0)?
{ after(grammarAccess.getPROGRAMAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
(rule__VariableDeclaration__Group__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDEBUT
entryRuleDEBUT 
:
{ before(grammarAccess.getDEBUTRule()); }
	 ruleDEBUT
{ after(grammarAccess.getDEBUTRule()); } 
	 EOF 
;

// Rule DEBUT
ruleDEBUT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDEBUTAccess().getLeftCurlyBracketKeyword()); }

	'{' 

{ after(grammarAccess.getDEBUTAccess().getLeftCurlyBracketKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFIN
entryRuleFIN 
:
{ before(grammarAccess.getFINRule()); }
	 ruleFIN
{ after(grammarAccess.getFINRule()); } 
	 EOF 
;

// Rule FIN
ruleFIN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFINAccess().getRightCurlyBracketKeyword()); }

	'}' 

{ after(grammarAccess.getFINAccess().getRightCurlyBracketKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstante
entryRuleConstante 
:
{ before(grammarAccess.getConstanteRule()); }
	 ruleConstante
{ after(grammarAccess.getConstanteRule()); } 
	 EOF 
;

// Rule Constante
ruleConstante
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstanteAccess().getValAssignment()); }
(rule__Constante__ValAssignment)
{ after(grammarAccess.getConstanteAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplication
entryRuleMultiplication 
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimary
entryRulePrimary 
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
(rule__Primary__Alternatives)
{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableRef
entryRuleVariableRef 
:
{ before(grammarAccess.getVariableRefRule()); }
	 ruleVariableRef
{ after(grammarAccess.getVariableRefRule()); } 
	 EOF 
;

// Rule VariableRef
ruleVariableRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableRefAccess().getVarAssignment()); }
(rule__VariableRef__VarAssignment)
{ after(grammarAccess.getVariableRefAccess().getVarAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddition
entryRuleAddition 
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getGroup()); }
(rule__Addition__Group__0)
{ after(grammarAccess.getAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTRANSITION
entryRuleTRANSITION 
:
{ before(grammarAccess.getTRANSITIONRule()); }
	 ruleTRANSITION
{ after(grammarAccess.getTRANSITIONRule()); } 
	 EOF 
;

// Rule TRANSITION
ruleTRANSITION
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTRANSITIONAccess().getGroup()); }
(rule__TRANSITION__Group__0)
{ after(grammarAccess.getTRANSITIONAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Primary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getVariableRefParserRuleCall_0()); }
	ruleVariableRef
{ after(grammarAccess.getPrimaryAccess().getVariableRefParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getConstanteParserRuleCall_1()); }
	ruleConstante
{ after(grammarAccess.getPrimaryAccess().getConstanteParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getGroup_2()); }
(rule__Primary__Group_2__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__PROGRAM__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PROGRAM__Group__0__Impl
	rule__PROGRAM__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PROGRAM__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPROGRAMAccess().getSystemKeyword_0()); }

	'System' 

{ after(grammarAccess.getPROGRAMAccess().getSystemKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PROGRAM__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PROGRAM__Group__1__Impl
	rule__PROGRAM__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PROGRAM__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPROGRAMAccess().getNameAssignment_1()); }
(rule__PROGRAM__NameAssignment_1)
{ after(grammarAccess.getPROGRAMAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PROGRAM__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PROGRAM__Group__2__Impl
	rule__PROGRAM__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PROGRAM__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPROGRAMAccess().getDEBUTParserRuleCall_2()); }
	ruleDEBUT
{ after(grammarAccess.getPROGRAMAccess().getDEBUTParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PROGRAM__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PROGRAM__Group__3__Impl
	rule__PROGRAM__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PROGRAM__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPROGRAMAccess().getVariablesAssignment_3()); }
(rule__PROGRAM__VariablesAssignment_3)*
{ after(grammarAccess.getPROGRAMAccess().getVariablesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PROGRAM__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PROGRAM__Group__4__Impl
	rule__PROGRAM__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PROGRAM__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getPROGRAMAccess().getTransitionsAssignment_4()); }
(rule__PROGRAM__TransitionsAssignment_4)
{ after(grammarAccess.getPROGRAMAccess().getTransitionsAssignment_4()); }
)
(
{ before(grammarAccess.getPROGRAMAccess().getTransitionsAssignment_4()); }
(rule__PROGRAM__TransitionsAssignment_4)*
{ after(grammarAccess.getPROGRAMAccess().getTransitionsAssignment_4()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PROGRAM__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PROGRAM__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PROGRAM__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPROGRAMAccess().getFINParserRuleCall_5()); }
	ruleFIN
{ after(grammarAccess.getPROGRAMAccess().getFINParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__VariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_0()); }
(rule__VariableDeclaration__NameAssignment_0)
{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getInitValAssignment_2()); }
(rule__VariableDeclaration__InitValAssignment_2)
{ after(grammarAccess.getVariableDeclarationAccess().getInitValAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
{ after(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)*
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1()); }

	'*' 

{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
(rule__Multiplication__RightAssignment_1_2)
{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Primary__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_2__0__Impl
	rule__Primary__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_2__1__Impl
	rule__Primary__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_2_1()); }
	ruleAddition
{ after(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Addition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
(rule__Addition__Group_1__0)*
{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1()); }

	'+' 

{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
(rule__Addition__RightAssignment_1_2)
{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TRANSITION__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TRANSITION__Group__0__Impl
	rule__TRANSITION__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TRANSITION__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTRANSITIONAccess().getTransitionKeyword_0()); }

	'transition' 

{ after(grammarAccess.getTRANSITIONAccess().getTransitionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TRANSITION__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TRANSITION__Group__1__Impl
	rule__TRANSITION__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TRANSITION__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTRANSITIONAccess().getNameAssignment_1()); }
(rule__TRANSITION__NameAssignment_1)
{ after(grammarAccess.getTRANSITIONAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TRANSITION__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TRANSITION__Group__2__Impl
	rule__TRANSITION__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TRANSITION__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTRANSITIONAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getTRANSITIONAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TRANSITION__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TRANSITION__Group__3__Impl
	rule__TRANSITION__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TRANSITION__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTRANSITIONAccess().getTRUEKeyword_3()); }

	'TRUE' 

{ after(grammarAccess.getTRANSITIONAccess().getTRUEKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TRANSITION__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TRANSITION__Group__4__Impl
	rule__TRANSITION__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TRANSITION__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTRANSITIONAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getTRANSITIONAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TRANSITION__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TRANSITION__Group__5__Impl
	rule__TRANSITION__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__TRANSITION__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTRANSITIONAccess().getGroup_5()); }
(rule__TRANSITION__Group_5__0)?
{ after(grammarAccess.getTRANSITIONAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TRANSITION__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TRANSITION__Group__6__Impl
	rule__TRANSITION__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__TRANSITION__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTRANSITIONAccess().getDEBUTParserRuleCall_6()); }
	ruleDEBUT
{ after(grammarAccess.getTRANSITIONAccess().getDEBUTParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TRANSITION__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TRANSITION__Group__7__Impl
	rule__TRANSITION__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__TRANSITION__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getTRANSITIONAccess().getAssignmentsAssignment_7()); }
(rule__TRANSITION__AssignmentsAssignment_7)
{ after(grammarAccess.getTRANSITIONAccess().getAssignmentsAssignment_7()); }
)
(
{ before(grammarAccess.getTRANSITIONAccess().getAssignmentsAssignment_7()); }
(rule__TRANSITION__AssignmentsAssignment_7)*
{ after(grammarAccess.getTRANSITIONAccess().getAssignmentsAssignment_7()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TRANSITION__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TRANSITION__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TRANSITION__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTRANSITIONAccess().getFINParserRuleCall_8()); }
	ruleFIN
{ after(grammarAccess.getTRANSITIONAccess().getFINParserRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__TRANSITION__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TRANSITION__Group_5__0__Impl
	rule__TRANSITION__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TRANSITION__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTRANSITIONAccess().getLabelKeyword_5_0()); }

	'label' 

{ after(grammarAccess.getTRANSITIONAccess().getLabelKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TRANSITION__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TRANSITION__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TRANSITION__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTRANSITIONAccess().getLabelAssignment_5_1()); }
(rule__TRANSITION__LabelAssignment_5_1)
{ after(grammarAccess.getTRANSITIONAccess().getLabelAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVarAssignment_0()); }
(rule__Assignment__VarAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getVarAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
	rule__Assignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExprAssignment_2()); }
(rule__Assignment__ExprAssignment_2)
{ after(grammarAccess.getAssignmentAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getAssignmentAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__PROGRAM__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPROGRAMAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPROGRAMAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PROGRAM__VariablesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPROGRAMAccess().getVariablesVariableDeclarationParserRuleCall_3_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getPROGRAMAccess().getVariablesVariableDeclarationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PROGRAM__TransitionsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPROGRAMAccess().getTransitionsTRANSITIONParserRuleCall_4_0()); }
	ruleTRANSITION{ after(grammarAccess.getPROGRAMAccess().getTransitionsTRANSITIONParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__InitValAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getInitValINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getVariableDeclarationAccess().getInitValINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constante__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstanteAccess().getValINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getConstanteAccess().getValINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	rulePrimary{ after(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__VarAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableRefAccess().getVarVariableCrossReference_0()); }
(
{ before(grammarAccess.getVariableRefAccess().getVarVariableIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getVariableRefAccess().getVarVariableIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getVariableRefAccess().getVarVariableCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
	ruleMultiplication{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TRANSITION__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTRANSITIONAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTRANSITIONAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TRANSITION__LabelAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTRANSITIONAccess().getLabelSTRINGTerminalRuleCall_5_1_0()); }
	RULE_STRING{ after(grammarAccess.getTRANSITIONAccess().getLabelSTRINGTerminalRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TRANSITION__AssignmentsAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTRANSITIONAccess().getAssignmentsAssignmentParserRuleCall_7_0()); }
	ruleAssignment{ after(grammarAccess.getTRANSITIONAccess().getAssignmentsAssignmentParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__VarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVarVariableRefParserRuleCall_0_0()); }
	ruleVariableRef{ after(grammarAccess.getAssignmentAccess().getVarVariableRefParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExprAdditionParserRuleCall_2_0()); }
	ruleAddition{ after(grammarAccess.getAssignmentAccess().getExprAdditionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


