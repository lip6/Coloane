/*
* generated by Xtext
*/
package fr.lip6.move.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.lip6.move.services.GalGrammarAccess;

public class GalParser extends AbstractContentAssistParser {
	
	@Inject
	private GalGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.lip6.move.ui.contentassist.antlr.internal.InternalGalParser createParser() {
		fr.lip6.move.ui.contentassist.antlr.internal.InternalGalParser result = new fr.lip6.move.ui.contentassist.antlr.internal.InternalGalParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getVariableDeclarationAccess().getAlternatives(), "rule__VariableDeclaration__Alternatives");
					put(grammarAccess.getAssignmentAccess().getAlternatives(), "rule__Assignment__Alternatives");
					put(grammarAccess.getAdditionAccess().getAlternatives_1_0(), "rule__Addition__Alternatives_1_0");
					put(grammarAccess.getMultiplicationAccess().getAlternatives_1_0(), "rule__Multiplication__Alternatives_1_0");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getNotAccess().getAlternatives_1(), "rule__Not__Alternatives_1");
					put(grammarAccess.getPrimaryBoolAccess().getAlternatives(), "rule__PrimaryBool__Alternatives");
					put(grammarAccess.getCompOperatorsAccess().getAlternatives(), "rule__CompOperators__Alternatives");
					put(grammarAccess.getSystemAccess().getGroup(), "rule__System__Group__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup_0(), "rule__VariableDeclaration__Group_0__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup_1(), "rule__VariableDeclaration__Group_1__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup_5(), "rule__Transition__Group_5__0");
					put(grammarAccess.getAssignmentAccess().getGroup_0(), "rule__Assignment__Group_0__0");
					put(grammarAccess.getAssignmentAccess().getGroup_1(), "rule__Assignment__Group_1__0");
					put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
					put(grammarAccess.getAdditionAccess().getGroup_1_0_0(), "rule__Addition__Group_1_0_0__0");
					put(grammarAccess.getAdditionAccess().getGroup_1_0_1(), "rule__Addition__Group_1_0_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1_0_0(), "rule__Multiplication__Group_1_0_0__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1_0_1(), "rule__Multiplication__Group_1_0_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1_0_2(), "rule__Multiplication__Group_1_0_2__0");
					put(grammarAccess.getUnitaryMinusAccess().getGroup(), "rule__UnitaryMinus__Group__0");
					put(grammarAccess.getPowerAccess().getGroup(), "rule__Power__Group__0");
					put(grammarAccess.getPowerAccess().getGroup_1(), "rule__Power__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_2(), "rule__Primary__Group_2__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getNotAccess().getGroup(), "rule__Not__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup(), "rule__QualifiedNameWithWildCard__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getSystemAccess().getNameAssignment_1(), "rule__System__NameAssignment_1");
					put(grammarAccess.getSystemAccess().getVariablesAssignment_3(), "rule__System__VariablesAssignment_3");
					put(grammarAccess.getSystemAccess().getTransitionsAssignment_4(), "rule__System__TransitionsAssignment_4");
					put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_0_0(), "rule__VariableDeclaration__NameAssignment_0_0");
					put(grammarAccess.getVariableDeclarationAccess().getInitValAssignment_0_2(), "rule__VariableDeclaration__InitValAssignment_0_2");
					put(grammarAccess.getVariableDeclarationAccess().getAnameAssignment_1_0(), "rule__VariableDeclaration__AnameAssignment_1_0");
					put(grammarAccess.getVariableDeclarationAccess().getIndexAssignment_1_2(), "rule__VariableDeclaration__IndexAssignment_1_2");
					put(grammarAccess.getVariableDeclarationAccess().getInitValAssignment_1_5(), "rule__VariableDeclaration__InitValAssignment_1_5");
					put(grammarAccess.getTransitionAccess().getNameAssignment_1(), "rule__Transition__NameAssignment_1");
					put(grammarAccess.getTransitionAccess().getGuardAssignment_3(), "rule__Transition__GuardAssignment_3");
					put(grammarAccess.getTransitionAccess().getLabelAssignment_5_1(), "rule__Transition__LabelAssignment_5_1");
					put(grammarAccess.getTransitionAccess().getAssignmentsAssignment_7(), "rule__Transition__AssignmentsAssignment_7");
					put(grammarAccess.getAssignmentAccess().getVarAssignment_0_0(), "rule__Assignment__VarAssignment_0_0");
					put(grammarAccess.getAssignmentAccess().getExprAssignment_0_2(), "rule__Assignment__ExprAssignment_0_2");
					put(grammarAccess.getAssignmentAccess().getAVarAssignment_1_0(), "rule__Assignment__AVarAssignment_1_0");
					put(grammarAccess.getAssignmentAccess().getIndexAssignment_1_2(), "rule__Assignment__IndexAssignment_1_2");
					put(grammarAccess.getAssignmentAccess().getExprAssignment_1_5(), "rule__Assignment__ExprAssignment_1_5");
					put(grammarAccess.getAdditionAccess().getRightAssignment_1_1(), "rule__Addition__RightAssignment_1_1");
					put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1(), "rule__Multiplication__RightAssignment_1_1");
					put(grammarAccess.getPowerAccess().getRightAssignment_1_2(), "rule__Power__RightAssignment_1_2");
					put(grammarAccess.getConstanteAccess().getValAssignment(), "rule__Constante__ValAssignment");
					put(grammarAccess.getVariableRefAccess().getVarAssignment(), "rule__VariableRef__VarAssignment");
					put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
					put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
					put(grammarAccess.getTrueAccess().getValueAssignment(), "rule__True__ValueAssignment");
					put(grammarAccess.getFalseAccess().getValueAssignment(), "rule__False__ValueAssignment");
					put(grammarAccess.getComparisonAccess().getLeftAssignment_0(), "rule__Comparison__LeftAssignment_0");
					put(grammarAccess.getComparisonAccess().getOperatorAssignment_1(), "rule__Comparison__OperatorAssignment_1");
					put(grammarAccess.getComparisonAccess().getRightAssignment_2(), "rule__Comparison__RightAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.lip6.move.ui.contentassist.antlr.internal.InternalGalParser typedParser = (fr.lip6.move.ui.contentassist.antlr.internal.InternalGalParser) parser;
			typedParser.entryRuleSystem();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public GalGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(GalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
