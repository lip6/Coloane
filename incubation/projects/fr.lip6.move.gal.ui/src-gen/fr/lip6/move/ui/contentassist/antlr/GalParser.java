/*
* generated by Xtext
*/
package fr.lip6.move.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.lip6.move.services.GalGrammarAccess;

public class GalParser extends AbstractContentAssistParser {
	
	@Inject
	private GalGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.lip6.move.ui.contentassist.antlr.internal.InternalGalParser createParser() {
		fr.lip6.move.ui.contentassist.antlr.internal.InternalGalParser result = new fr.lip6.move.ui.contentassist.antlr.internal.InternalGalParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getPROGRAMAccess().getGroup(), "rule__PROGRAM__Group__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_2(), "rule__Primary__Group_2__0");
					put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
					put(grammarAccess.getTRANSITIONAccess().getGroup(), "rule__TRANSITION__Group__0");
					put(grammarAccess.getTRANSITIONAccess().getGroup_5(), "rule__TRANSITION__Group_5__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getPROGRAMAccess().getNameAssignment_1(), "rule__PROGRAM__NameAssignment_1");
					put(grammarAccess.getPROGRAMAccess().getVariablesAssignment_3(), "rule__PROGRAM__VariablesAssignment_3");
					put(grammarAccess.getPROGRAMAccess().getTransitionsAssignment_4(), "rule__PROGRAM__TransitionsAssignment_4");
					put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_0(), "rule__VariableDeclaration__NameAssignment_0");
					put(grammarAccess.getVariableDeclarationAccess().getInitValAssignment_2(), "rule__VariableDeclaration__InitValAssignment_2");
					put(grammarAccess.getConstanteAccess().getValAssignment(), "rule__Constante__ValAssignment");
					put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2(), "rule__Multiplication__RightAssignment_1_2");
					put(grammarAccess.getVariableRefAccess().getVarAssignment(), "rule__VariableRef__VarAssignment");
					put(grammarAccess.getAdditionAccess().getRightAssignment_1_2(), "rule__Addition__RightAssignment_1_2");
					put(grammarAccess.getTRANSITIONAccess().getNameAssignment_1(), "rule__TRANSITION__NameAssignment_1");
					put(grammarAccess.getTRANSITIONAccess().getLabelAssignment_5_1(), "rule__TRANSITION__LabelAssignment_5_1");
					put(grammarAccess.getTRANSITIONAccess().getAssignmentsAssignment_7(), "rule__TRANSITION__AssignmentsAssignment_7");
					put(grammarAccess.getAssignmentAccess().getVarAssignment_0(), "rule__Assignment__VarAssignment_0");
					put(grammarAccess.getAssignmentAccess().getExprAssignment_2(), "rule__Assignment__ExprAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.lip6.move.ui.contentassist.antlr.internal.InternalGalParser typedParser = (fr.lip6.move.ui.contentassist.antlr.internal.InternalGalParser) parser;
			typedParser.entryRulePROGRAM();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public GalGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(GalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
