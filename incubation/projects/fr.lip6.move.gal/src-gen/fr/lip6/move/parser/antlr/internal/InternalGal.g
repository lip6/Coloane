/*
* generated by Xtext
*/
grammar InternalGal;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.lip6.move.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.lip6.move.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.lip6.move.services.GalGrammarAccess;

}

@parser::members {

 	private GalGrammarAccess grammarAccess;
 	
    public InternalGalParser(TokenStream input, GalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PROGRAM";	
   	}
   	
   	@Override
   	protected GalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePROGRAM
entryRulePROGRAM returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPROGRAMRule()); }
	 iv_rulePROGRAM=rulePROGRAM 
	 { $current=$iv_rulePROGRAM.current; } 
	 EOF 
;

// Rule PROGRAM
rulePROGRAM returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='System' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPROGRAMAccess().getSystemKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPROGRAMAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPROGRAMRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getPROGRAMAccess().getDEBUTParserRuleCall_2()); 
    }
ruleDEBUT
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPROGRAMAccess().getVariablesVariableDeclarationParserRuleCall_3_0()); 
	    }
		lv_variables_3_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPROGRAMRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_3_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getPROGRAMAccess().getTransitionsTRANSITIONParserRuleCall_4_0()); 
	    }
		lv_transitions_4_0=ruleTRANSITION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPROGRAMRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_4_0, 
        		"TRANSITION");
	        afterParserOrEnumRuleCall();
	    }

)
)+
    { 
        newCompositeNode(grammarAccess.getPROGRAMAccess().getFINParserRuleCall_5()); 
    }
ruleFIN
    { 
        afterParserOrEnumRuleCall();
    }
)?
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_initVal_2_0=RULE_INT
		{
			newLeafNode(lv_initVal_2_0, grammarAccess.getVariableDeclarationAccess().getInitValINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"initVal",
        		lv_initVal_2_0, 
        		"INT");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleDEBUT
entryRuleDEBUT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDEBUTRule()); } 
	 iv_ruleDEBUT=ruleDEBUT 
	 { $current=$iv_ruleDEBUT.current.getText(); }  
	 EOF 
;

// Rule DEBUT
ruleDEBUT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDEBUTAccess().getLeftCurlyBracketKeyword()); 
    }

    ;





// Entry rule entryRuleFIN
entryRuleFIN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFINRule()); } 
	 iv_ruleFIN=ruleFIN 
	 { $current=$iv_ruleFIN.current.getText(); }  
	 EOF 
;

// Rule FIN
ruleFIN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFINAccess().getRightCurlyBracketKeyword()); 
    }

    ;





// Entry rule entryRuleConstante
entryRuleConstante returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstanteRule()); }
	 iv_ruleConstante=ruleConstante 
	 { $current=$iv_ruleConstante.current; } 
	 EOF 
;

// Rule Constante
ruleConstante returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=RULE_INT
		{
			newLeafNode(lv_val_0_0, grammarAccess.getConstanteAccess().getValINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstanteRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); 
    }
    this_Primary_0=rulePrimary
    { 
        $current = $this_Primary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getVariableRefParserRuleCall_0()); 
    }
    this_VariableRef_0=ruleVariableRef
    { 
        $current = $this_VariableRef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getConstanteParserRuleCall_1()); 
    }
    this_Constante_1=ruleConstante
    { 
        $current = $this_Constante_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_2_1()); 
    }
    this_Addition_3=ruleAddition
    { 
        $current = $this_Addition_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_2());
    }
))
;





// Entry rule entryRuleVariableRef
entryRuleVariableRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRefRule()); }
	 iv_ruleVariableRef=ruleVariableRef 
	 { $current=$iv_ruleVariableRef.current; } 
	 EOF 
;

// Rule VariableRef
ruleVariableRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getVariableRefAccess().getVarVariableCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTRANSITION
entryRuleTRANSITION returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTRANSITIONRule()); }
	 iv_ruleTRANSITION=ruleTRANSITION 
	 { $current=$iv_ruleTRANSITION.current; } 
	 EOF 
;

// Rule TRANSITION
ruleTRANSITION returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='transition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTRANSITIONAccess().getTransitionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTRANSITIONAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTRANSITIONRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTRANSITIONAccess().getLeftSquareBracketKeyword_2());
    }
	otherlv_3='TRUE' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTRANSITIONAccess().getTRUEKeyword_3());
    }
	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTRANSITIONAccess().getRightSquareBracketKeyword_4());
    }
(	otherlv_5='label' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTRANSITIONAccess().getLabelKeyword_5_0());
    }
(
(
		lv_label_6_0=RULE_STRING
		{
			newLeafNode(lv_label_6_0, grammarAccess.getTRANSITIONAccess().getLabelSTRINGTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTRANSITIONRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_6_0, 
        		"STRING");
	    }

)
))?
    { 
        newCompositeNode(grammarAccess.getTRANSITIONAccess().getDEBUTParserRuleCall_6()); 
    }
ruleDEBUT
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTRANSITIONAccess().getAssignmentsAssignmentParserRuleCall_7_0()); 
	    }
		lv_assignments_8_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTRANSITIONRule());
	        }
       		add(
       			$current, 
       			"assignments",
        		lv_assignments_8_0, 
        		"Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
)+
    { 
        newCompositeNode(grammarAccess.getTRANSITIONAccess().getFINParserRuleCall_8()); 
    }
ruleFIN
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getVarVariableRefParserRuleCall_0_0()); 
	    }
		lv_var_0_0=ruleVariableRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"VariableRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getExprAdditionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Addition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAssignmentAccess().getSemicolonKeyword_3());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


