/*
* generated by Xtext
*/
grammar InternalGal;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.lip6.move.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.lip6.move.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.lip6.move.services.GalGrammarAccess;

}

@parser::members {

 	private GalGrammarAccess grammarAccess;
 	
    public InternalGalParser(TokenStream input, GalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "System";	
   	}
   	
   	@Override
   	protected GalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSystemRule()); }
	 iv_ruleSystem=ruleSystem 
	 { $current=$iv_ruleSystem.current; } 
	 EOF 
;

// Rule System
ruleSystem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='GAL' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSystemAccess().getGALKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSystemAccess().getLeftCurlyBracketKeyword_2());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getSystemAccess().getUnorderedGroup_3());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getSystemAccess().getUnorderedGroup_3(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getSystemAccess().getUnorderedGroup_3(), 0);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getVariablesVariableDeclarationParserRuleCall_3_0_0()); 
	    }
		lv_variables_4_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_4_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))+
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSystemAccess().getUnorderedGroup_3());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getSystemAccess().getUnorderedGroup_3(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getSystemAccess().getUnorderedGroup_3(), 1);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getArraysArrayDeclarationParserRuleCall_3_1_0()); 
	    }
		lv_arrays_5_0=ruleArrayDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		add(
       			$current, 
       			"arrays",
        		lv_arrays_5_0, 
        		"ArrayDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))+
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSystemAccess().getUnorderedGroup_3());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getSystemAccess().getUnorderedGroup_3(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getSystemAccess().getUnorderedGroup_3(), 2);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getListsListDeclarationParserRuleCall_3_2_0()); 
	    }
		lv_lists_6_0=ruleListDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		add(
       			$current, 
       			"lists",
        		lv_lists_6_0, 
        		"ListDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))+
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSystemAccess().getUnorderedGroup_3());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getSystemAccess().getUnorderedGroup_3(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getSystemAccess().getUnorderedGroup_3(), 3);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getTransitionsTransitionParserRuleCall_3_3_0()); 
	    }
		lv_transitions_7_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_7_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
))+
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSystemAccess().getUnorderedGroup_3());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getSystemAccess().getUnorderedGroup_3(), 4)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getSystemAccess().getUnorderedGroup_3(), 4);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getTransientTransientParserRuleCall_3_4_0()); 
	    }
		lv_transient_8_0=ruleTransient		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		set(
       			$current, 
       			"transient",
        		lv_transient_8_0, 
        		"Transient");
	        afterParserOrEnumRuleCall();
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSystemAccess().getUnorderedGroup_3());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getSystemAccess().getUnorderedGroup_3());
	}

)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSystemAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleTransient
entryRuleTransient returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransientRule()); }
	 iv_ruleTransient=ruleTransient 
	 { $current=$iv_ruleTransient.current; } 
	 EOF 
;

// Rule Transient
ruleTransient returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='TRANSIENT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransientAccess().getTRANSIENTKeyword_0());
    }
	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransientAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransientAccess().getValueOrParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransientRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Or");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransientAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='int' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationAccess().getIntKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getValueIntegerParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Integer");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleArrayDeclaration
entryRuleArrayDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayDeclarationRule()); }
	 iv_ruleArrayDeclaration=ruleArrayDeclaration 
	 { $current=$iv_ruleArrayDeclaration.current; } 
	 EOF 
;

// Rule ArrayDeclaration
ruleArrayDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='array' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayDeclarationAccess().getArrayKeyword_0());
    }
	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayDeclarationAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		lv_size_2_0=RULE_INT
		{
			newLeafNode(lv_size_2_0, grammarAccess.getArrayDeclarationAccess().getSizeINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"size",
        		lv_size_2_0, 
        		"INT");
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayDeclarationAccess().getRightSquareBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayDeclarationAccess().getNameQualifiedNameParserRuleCall_4_0()); 
	    }
		lv_name_4_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrayDeclarationAccess().getEqualsSignKeyword_5());
    }
	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getArrayDeclarationAccess().getLeftParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayDeclarationAccess().getValuesInitValuesParserRuleCall_7_0()); 
	    }
		lv_values_7_0=ruleInitValues		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayDeclarationRule());
	        }
       		set(
       			$current, 
       			"values",
        		lv_values_7_0, 
        		"InitValues");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getArrayDeclarationAccess().getRightParenthesisKeyword_8());
    }
	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getArrayDeclarationAccess().getSemicolonKeyword_9());
    }
)
;





// Entry rule entryRuleListDeclaration
entryRuleListDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListDeclarationRule()); }
	 iv_ruleListDeclaration=ruleListDeclaration 
	 { $current=$iv_ruleListDeclaration.current; } 
	 EOF 
;

// Rule ListDeclaration
ruleListDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='list' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getListDeclarationAccess().getListKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getListDeclarationAccess().getEqualsSignKeyword_2_0());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getListDeclarationAccess().getLeftParenthesisKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListDeclarationAccess().getValuesInitValuesParserRuleCall_2_2_0()); 
	    }
		lv_values_4_0=ruleInitValues		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListDeclarationRule());
	        }
       		set(
       			$current, 
       			"values",
        		lv_values_4_0, 
        		"InitValues");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getListDeclarationAccess().getRightParenthesisKeyword_2_3());
    }
)?	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getListDeclarationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleInitValues
entryRuleInitValues returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitValuesRule()); }
	 iv_ruleInitValues=ruleInitValues 
	 { $current=$iv_ruleInitValues.current; } 
	 EOF 
;

// Rule InitValues
ruleInitValues returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInitValuesAccess().getValuesIntegerParserRuleCall_0_0()); 
	    }
		lv_values_0_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitValuesRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_0_0, 
        		"Integer");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInitValuesAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInitValuesAccess().getValuesIntegerParserRuleCall_1_1_0()); 
	    }
		lv_values_2_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitValuesRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"Integer");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='transition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransitionAccess().getTransitionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransitionAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getGuardOrParserRuleCall_3_0()); 
	    }
		lv_guard_3_0=ruleOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_3_0, 
        		"Or");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTransitionAccess().getRightSquareBracketKeyword_4());
    }
(	otherlv_5='label' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransitionAccess().getLabelKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getLabelQualifiedNameParserRuleCall_5_1_0()); 
	    }
		lv_label_6_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_6_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTransitionAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getActionsActionsParserRuleCall_7_0()); 
	    }
		lv_actions_8_0=ruleActions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_8_0, 
        		"Actions");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTransitionAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleActions
entryRuleActions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionsRule()); }
	 iv_ruleActions=ruleActions 
	 { $current=$iv_ruleActions.current; } 
	 EOF 
;

// Rule Actions
ruleActions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActionsAccess().getAssignmentParserRuleCall_0()); 
    }
    this_Assignment_0=ruleAssignment
    { 
        $current = $this_Assignment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionsAccess().getPushParserRuleCall_1()); 
    }
    this_Push_1=rulePush
    { 
        $current = $this_Push_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionsAccess().getPopParserRuleCall_2()); 
    }
    this_Pop_2=rulePop
    { 
        $current = $this_Pop_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePush
entryRulePush returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPushRule()); }
	 iv_rulePush=rulePush 
	 { $current=$iv_rulePush.current; } 
	 EOF 
;

// Rule Push
rulePush returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPushRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getPushAccess().getListListCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='.push' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPushAccess().getPushKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPushAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPushAccess().getValueBitOrParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleBitOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPushRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"BitOr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPushAccess().getRightParenthesisKeyword_4());
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPushAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRulePop
entryRulePop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPopRule()); }
	 iv_rulePop=rulePop 
	 { $current=$iv_rulePop.current; } 
	 EOF 
;

// Rule Pop
rulePop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPopRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getPopAccess().getListListCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='.pop' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPopAccess().getPopKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPopAccess().getLeftParenthesisKeyword_2());
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPopAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPopAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getLeftVarAccessParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleVarAccess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"VarAccess");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getRightBitOrParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleBitOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"BitOr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAssignmentAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleVarAccess
entryRuleVarAccess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarAccessRule()); }
	 iv_ruleVarAccess=ruleVarAccess 
	 { $current=$iv_ruleVarAccess.current; } 
	 EOF 
;

// Rule VarAccess
ruleVarAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVarAccessAccess().getArrayVarAccessParserRuleCall_0()); 
    }
    this_ArrayVarAccess_0=ruleArrayVarAccess
    { 
        $current = $this_ArrayVarAccess_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVarAccessAccess().getVariableRefParserRuleCall_1()); 
    }
    this_VariableRef_1=ruleVariableRef
    { 
        $current = $this_VariableRef_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariableRef
entryRuleVariableRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRefRule()); }
	 iv_ruleVariableRef=ruleVariableRef 
	 { $current=$iv_ruleVariableRef.current; } 
	 EOF 
;

// Rule VariableRef
ruleVariableRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getVariableRefAccess().getReferencedVarVariableCrossReference_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleArrayVarAccess
entryRuleArrayVarAccess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayVarAccessRule()); }
	 iv_ruleArrayVarAccess=ruleArrayVarAccess 
	 { $current=$iv_ruleArrayVarAccess.current; } 
	 EOF 
;

// Rule ArrayVarAccess
ruleArrayVarAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayVarAccessRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getArrayVarAccessAccess().getPrefixArrayPrefixCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayVarAccessAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayVarAccessAccess().getIndexBitOrParserRuleCall_2_0()); 
	    }
		lv_index_2_0=ruleBitOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayVarAccessRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_2_0, 
        		"BitOr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayVarAccessAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleBitOr
entryRuleBitOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitOrRule()); }
	 iv_ruleBitOr=ruleBitOr 
	 { $current=$iv_ruleBitOr.current; } 
	 EOF 
;

// Rule BitOr
ruleBitOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitOrAccess().getBitXorParserRuleCall_0()); 
    }
    this_BitXor_0=ruleBitXor
    { 
        $current = $this_BitXor_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitOrAccess().getBinaryIntExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'|' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getBitOrAccess().getOpVerticalLineKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitOrRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "|");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitOrAccess().getRightBitXorParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBitXor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BitXor");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitXor
entryRuleBitXor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitXorRule()); }
	 iv_ruleBitXor=ruleBitXor 
	 { $current=$iv_ruleBitXor.current; } 
	 EOF 
;

// Rule BitXor
ruleBitXor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitXorAccess().getBitAndParserRuleCall_0()); 
    }
    this_BitAnd_0=ruleBitAnd
    { 
        $current = $this_BitAnd_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitXorAccess().getBinaryIntExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'^' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getBitXorAccess().getOpCircumflexAccentKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitXorRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "^");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitXorAccess().getRightBitAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBitAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitXorRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BitAnd");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitAnd
entryRuleBitAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitAndRule()); }
	 iv_ruleBitAnd=ruleBitAnd 
	 { $current=$iv_ruleBitAnd.current; } 
	 EOF 
;

// Rule BitAnd
ruleBitAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitAndAccess().getBitShiftParserRuleCall_0()); 
    }
    this_BitShift_0=ruleBitShift
    { 
        $current = $this_BitShift_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitAndAccess().getBinaryIntExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'&' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getBitAndAccess().getOpAmpersandKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitAndRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "&");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitAndAccess().getRightBitShiftParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBitShift		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BitShift");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitShift
entryRuleBitShift returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitShiftRule()); }
	 iv_ruleBitShift=ruleBitShift 
	 { $current=$iv_ruleBitShift.current; } 
	 EOF 
;

// Rule BitShift
ruleBitShift returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitShiftAccess().getAdditionParserRuleCall_0()); 
    }
    this_Addition_0=ruleAddition
    { 
        $current = $this_Addition_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitShiftAccess().getBinaryIntExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'<<' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getBitShiftAccess().getOpLessThanSignLessThanSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitShiftRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'>>' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getBitShiftAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitShiftRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitShiftAccess().getRightAdditionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitShiftRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Addition");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getBinaryIntExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'+' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getAdditionAccess().getOpPlusSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'-' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getAdditionAccess().getOpHyphenMinusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationAccess().getBitComplementParserRuleCall_0()); 
    }
    this_BitComplement_0=ruleBitComplement
    { 
        $current = $this_BitComplement_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getBinaryIntExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'/' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getMultiplicationAccess().getOpSolidusKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'*' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getMultiplicationAccess().getOpAsteriskKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'%' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getMultiplicationAccess().getOpPercentSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getRightBitComplementParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBitComplement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BitComplement");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitComplement
entryRuleBitComplement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitComplementRule()); }
	 iv_ruleBitComplement=ruleBitComplement 
	 { $current=$iv_ruleBitComplement.current; } 
	 EOF 
;

// Rule BitComplement
ruleBitComplement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='~' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBitComplementAccess().getTildeKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getBitComplementAccess().getPowerParserRuleCall_0_1()); 
    }
    this_Power_1=rulePower
    { 
        $current = $this_Power_1.current; 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitComplementAccess().getBitComplementValueAction_0_2(),
            $current);
    }
))
    |(	otherlv_3='-' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBitComplementAccess().getHyphenMinusKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getBitComplementAccess().getPowerParserRuleCall_1_1()); 
    }
    this_Power_4=rulePower
    { 
        $current = $this_Power_4.current; 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitComplementAccess().getUnaryMinusValueAction_1_2(),
            $current);
    }
))
    |
    { 
        newCompositeNode(grammarAccess.getBitComplementAccess().getPowerParserRuleCall_2()); 
    }
    this_Power_6=rulePower
    { 
        $current = $this_Power_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePower
entryRulePower returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPowerRule()); }
	 iv_rulePower=rulePower 
	 { $current=$iv_rulePower.current; } 
	 EOF 
;

// Rule Power
rulePower returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPowerAccess().getPrimaryParserRuleCall_0()); 
    }
    this_Primary_0=rulePrimary
    { 
        $current = $this_Primary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPowerAccess().getBinaryIntExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'**' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getPowerAccess().getOpAsteriskAsteriskKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPowerRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "**");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getRightPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getPeekParserRuleCall_0()); 
    }
    this_Peek_0=rulePeek
    { 
        $current = $this_Peek_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getVarAccessParserRuleCall_1()); 
    }
    this_VarAccess_1=ruleVarAccess
    { 
        $current = $this_VarAccess_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getConstantParserRuleCall_2()); 
    }
    this_Constant_2=ruleConstant
    { 
        $current = $this_Constant_2.current; 
        afterParserOrEnumRuleCall();
    }

    |((((	'(' 
	ruleBitOr	')' 
))=>(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getBitOrParserRuleCall_3_0_0_1()); 
    }
    this_BitOr_4=ruleBitOr
    { 
        $current = $this_BitOr_4.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_0_0_2());
    }
))
    |(	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getWrapBoolExprParserRuleCall_3_1_1()); 
    }
    this_WrapBoolExpr_7=ruleWrapBoolExpr
    { 
        $current = $this_WrapBoolExpr_7.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_1_2());
    }
)))
;





// Entry rule entryRuleWrapBoolExpr
entryRuleWrapBoolExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWrapBoolExprRule()); }
	 iv_ruleWrapBoolExpr=ruleWrapBoolExpr 
	 { $current=$iv_ruleWrapBoolExpr.current; } 
	 EOF 
;

// Rule WrapBoolExpr
ruleWrapBoolExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getWrapBoolExprAccess().getValueOrParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWrapBoolExprRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Or");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getConstantAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRulePeek
entryRulePeek returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPeekRule()); }
	 iv_rulePeek=rulePeek 
	 { $current=$iv_rulePeek.current; } 
	 EOF 
;

// Rule Peek
rulePeek returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPeekRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getPeekAccess().getListListCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='.peek' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPeekAccess().getPeekKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPeekAccess().getLeftParenthesisKeyword_2());
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPeekAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current; } 
	 EOF 
;

// Rule Or
ruleOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0()); 
    }
    this_And_0=ruleAnd
    { 
        $current = $this_And_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrAccess().getOrLeftAction_1_0(),
            $current);
    }
)	otherlv_2='||' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"And");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current; } 
	 EOF 
;

// Rule And
ruleAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndAccess().getNotParserRuleCall_0()); 
    }
    this_Not_0=ruleNot
    { 
        $current = $this_Not_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndAccess().getAndLeftAction_1_0(),
            $current);
    }
)	otherlv_2='&&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndAccess().getRightNotParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleNot		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Not");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNot
entryRuleNot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotRule()); }
	 iv_ruleNot=ruleNot 
	 { $current=$iv_ruleNot.current; } 
	 EOF 
;

// Rule Not
ruleNot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='!' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNotAccess().getExclamationMarkKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getNotAccess().getPrimaryBoolParserRuleCall_0_1()); 
    }
    this_PrimaryBool_1=rulePrimaryBool
    { 
        $current = $this_PrimaryBool_1.current; 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNotAccess().getNotValueAction_0_2(),
            $current);
    }
))
    |
    { 
        newCompositeNode(grammarAccess.getNotAccess().getPrimaryBoolParserRuleCall_1()); 
    }
    this_PrimaryBool_3=rulePrimaryBool
    { 
        $current = $this_PrimaryBool_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePrimaryBool
entryRulePrimaryBool returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryBoolRule()); }
	 iv_rulePrimaryBool=rulePrimaryBool 
	 { $current=$iv_rulePrimaryBool.current; } 
	 EOF 
;

// Rule PrimaryBool
rulePrimaryBool returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryBoolAccess().getTrueParserRuleCall_0()); 
    }
    this_True_0=ruleTrue
    { 
        $current = $this_True_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryBoolAccess().getFalseParserRuleCall_1()); 
    }
    this_False_1=ruleFalse
    { 
        $current = $this_False_1.current; 
        afterParserOrEnumRuleCall();
    }

    |((	ruleComparison)=>
    { 
        newCompositeNode(grammarAccess.getPrimaryBoolAccess().getComparisonParserRuleCall_2()); 
    }
    this_Comparison_2=ruleComparison
    { 
        $current = $this_Comparison_2.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryBoolAccess().getLeftParenthesisKeyword_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryBoolAccess().getOrParserRuleCall_3_1()); 
    }
    this_Or_4=ruleOr
    { 
        $current = $this_Or_4.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPrimaryBoolAccess().getRightParenthesisKeyword_3_2());
    }
))
;





// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current; } 
	 EOF 
;

// Rule Comparison
ruleComparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getLeftBitOrParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleBitOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"BitOr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getOperatorComparisonOperatorsEnumRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleComparisonOperators		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"ComparisonOperators");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getRightBitOrParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleBitOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"BitOr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTrue
entryRuleTrue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrueRule()); }
	 iv_ruleTrue=ruleTrue 
	 { $current=$iv_ruleTrue.current; } 
	 EOF 
;

// Rule True
ruleTrue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=	'True' 
    {
        newLeafNode(lv_value_0_0, grammarAccess.getTrueAccess().getValueTrueKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrueRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_0, "True");
	    }

)
)
;





// Entry rule entryRuleFalse
entryRuleFalse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFalseRule()); }
	 iv_ruleFalse=ruleFalse 
	 { $current=$iv_ruleFalse.current; } 
	 EOF 
;

// Rule False
ruleFalse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=	'False' 
    {
        newLeafNode(lv_value_0_0, grammarAccess.getFalseAccess().getValueFalseKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFalseRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_0, "False");
	    }

)
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
(    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getQualifiedNameAccess().getINTTerminalRuleCall_1_1_0()); 
    }

    |    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1_1()); 
    }
))*)
    ;





// Entry rule entryRuleInteger
entryRuleInteger returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerRule()); } 
	 iv_ruleInteger=ruleInteger 
	 { $current=$iv_ruleInteger.current.getText(); }  
	 EOF 
;

// Rule Integer
ruleInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getIntegerAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Rule ComparisonOperators
ruleComparisonOperators returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='>' 
	{
        $current = grammarAccess.getComparisonOperatorsAccess().getGTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComparisonOperatorsAccess().getGTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<' 
	{
        $current = grammarAccess.getComparisonOperatorsAccess().getLTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComparisonOperatorsAccess().getLTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>=' 
	{
        $current = grammarAccess.getComparisonOperatorsAccess().getGEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getComparisonOperatorsAccess().getGEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='<=' 
	{
        $current = grammarAccess.getComparisonOperatorsAccess().getLEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getComparisonOperatorsAccess().getLEEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='==' 
	{
        $current = grammarAccess.getComparisonOperatorsAccess().getEQEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getComparisonOperatorsAccess().getEQEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='!=' 
	{
        $current = grammarAccess.getComparisonOperatorsAccess().getNEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getComparisonOperatorsAccess().getNEEnumLiteralDeclaration_5()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


