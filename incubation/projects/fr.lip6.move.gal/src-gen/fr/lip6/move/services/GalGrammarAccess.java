/*
* generated by Xtext
*/

package fr.lip6.move.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GalGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cVariablesAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_3_0_0 = (RuleCall)cVariablesAssignment_3_0.eContents().get(0);
		private final Assignment cArraysAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cArraysArrayDeclarationParserRuleCall_3_1_0 = (RuleCall)cArraysAssignment_3_1.eContents().get(0);
		private final Assignment cListsAssignment_3_2 = (Assignment)cUnorderedGroup_3.eContents().get(2);
		private final RuleCall cListsListDeclarationParserRuleCall_3_2_0 = (RuleCall)cListsAssignment_3_2.eContents().get(0);
		private final Assignment cTransitionsAssignment_3_3 = (Assignment)cUnorderedGroup_3.eContents().get(3);
		private final RuleCall cTransitionsTransitionParserRuleCall_3_3_0 = (RuleCall)cTransitionsAssignment_3_3.eContents().get(0);
		private final Assignment cTransientAssignment_3_4 = (Assignment)cUnorderedGroup_3.eContents().get(4);
		private final RuleCall cTransientTransientParserRuleCall_3_4_0 = (RuleCall)cTransientAssignment_3_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// **
		// * System
		// * / System:
		//	"GAL" name=QualifiedName "{" (variables+=VariableDeclaration* & arrays+=ArrayDeclaration* & lists+=ListDeclaration* &
		//	transitions+=Transition* & transient=Transient?) "}";
		public ParserRule getRule() { return rule; }

		//"GAL" name=QualifiedName "{" (variables+=VariableDeclaration* & arrays+=ArrayDeclaration* & lists+=ListDeclaration* &
		//transitions+=Transition* & transient=Transient?) "}"
		public Group getGroup() { return cGroup; }

		//"GAL"
		public Keyword getGALKeyword_0() { return cGALKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//variables+=VariableDeclaration* & arrays+=ArrayDeclaration* & lists+=ListDeclaration* & transitions+=Transition* &
		//transient=Transient?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//variables+=VariableDeclaration*
		public Assignment getVariablesAssignment_3_0() { return cVariablesAssignment_3_0; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_3_0_0() { return cVariablesVariableDeclarationParserRuleCall_3_0_0; }

		//arrays+=ArrayDeclaration*
		public Assignment getArraysAssignment_3_1() { return cArraysAssignment_3_1; }

		//ArrayDeclaration
		public RuleCall getArraysArrayDeclarationParserRuleCall_3_1_0() { return cArraysArrayDeclarationParserRuleCall_3_1_0; }

		//lists+=ListDeclaration*
		public Assignment getListsAssignment_3_2() { return cListsAssignment_3_2; }

		//ListDeclaration
		public RuleCall getListsListDeclarationParserRuleCall_3_2_0() { return cListsListDeclarationParserRuleCall_3_2_0; }

		//transitions+=Transition*
		public Assignment getTransitionsAssignment_3_3() { return cTransitionsAssignment_3_3; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_3_3_0() { return cTransitionsTransitionParserRuleCall_3_3_0; }

		//transient=Transient?
		public Assignment getTransientAssignment_3_4() { return cTransientAssignment_3_4; }

		//Transient
		public RuleCall getTransientTransientParserRuleCall_3_4_0() { return cTransientTransientParserRuleCall_3_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TransientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transient");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTRANSIENTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueOrParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Transient:
		//	"TRANSIENT" "=" value=Or ";";
		public ParserRule getRule() { return rule; }

		//"TRANSIENT" "=" value=Or ";"
		public Group getGroup() { return cGroup; }

		//"TRANSIENT"
		public Keyword getTRANSIENTKeyword_0() { return cTRANSIENTKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Or
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Or
		public RuleCall getValueOrParserRuleCall_2_0() { return cValueOrParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueIntegerParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// * ============ System Content ================== * / //Ex: int abc = 10 ; 
		//VariableDeclaration returns Variable:
		//	"int" name=QualifiedName "=" value=Integer ";";
		public ParserRule getRule() { return rule; }

		//"int" name=QualifiedName "=" value=Integer ";"
		public Group getGroup() { return cGroup; }

		//"int"
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Integer
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Integer
		public RuleCall getValueIntegerParserRuleCall_3_0() { return cValueIntegerParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ArrayDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeINTTerminalRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameQualifiedNameParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cValuesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cValuesInitValuesParserRuleCall_7_0 = (RuleCall)cValuesAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////Ex: array[1] tab = (2) ;
		//ArrayDeclaration returns ArrayPrefix:
		//	"array" "[" size=INT "]" name=QualifiedName "=" "(" values=InitValues? ")" ";";
		public ParserRule getRule() { return rule; }

		//"array" "[" size=INT "]" name=QualifiedName "=" "(" values=InitValues? ")" ";"
		public Group getGroup() { return cGroup; }

		//"array"
		public Keyword getArrayKeyword_0() { return cArrayKeyword_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//size=INT
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_2_0() { return cSizeINTTerminalRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//name=QualifiedName
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_4_0() { return cNameQualifiedNameParserRuleCall_4_0; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//values=InitValues?
		public Assignment getValuesAssignment_7() { return cValuesAssignment_7; }

		//InitValues
		public RuleCall getValuesInitValuesParserRuleCall_7_0() { return cValuesInitValuesParserRuleCall_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//";"
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}

	public class ListDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValuesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValuesInitValuesParserRuleCall_2_2_0 = (RuleCall)cValuesAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListDeclaration returns List:
		//	"list" name=QualifiedName ("=" "(" values=InitValues? ")")? ";";
		public ParserRule getRule() { return rule; }

		//"list" name=QualifiedName ("=" "(" values=InitValues? ")")? ";"
		public Group getGroup() { return cGroup; }

		//"list"
		public Keyword getListKeyword_0() { return cListKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//("=" "(" values=InitValues? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//values=InitValues?
		public Assignment getValuesAssignment_2_2() { return cValuesAssignment_2_2; }

		//InitValues
		public RuleCall getValuesInitValuesParserRuleCall_2_2_0() { return cValuesInitValuesParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class InitValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitValues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValuesIntegerParserRuleCall_0_0 = (RuleCall)cValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesIntegerParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//InitValues:
		//	values+=Integer ("," values+=Integer)*;
		public ParserRule getRule() { return rule; }

		//values+=Integer ("," values+=Integer)*
		public Group getGroup() { return cGroup; }

		//values+=Integer
		public Assignment getValuesAssignment_0() { return cValuesAssignment_0; }

		//Integer
		public RuleCall getValuesIntegerParserRuleCall_0_0() { return cValuesIntegerParserRuleCall_0_0; }

		//("," values+=Integer)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//values+=Integer
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }

		//Integer
		public RuleCall getValuesIntegerParserRuleCall_1_1_0() { return cValuesIntegerParserRuleCall_1_1_0; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGuardAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGuardOrParserRuleCall_3_0 = (RuleCall)cGuardAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLabelKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLabelAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLabelQualifiedNameParserRuleCall_5_1_0 = (RuleCall)cLabelAssignment_5_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cActionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cActionsActionsParserRuleCall_7_0 = (RuleCall)cActionsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Transition:
		//	"transition" name=QualifiedName "[" guard=Or "]" ("label" label=QualifiedName)? "{" actions+=Actions* "}";
		public ParserRule getRule() { return rule; }

		//"transition" name=QualifiedName "[" guard=Or "]" ("label" label=QualifiedName)? "{" actions+=Actions* "}"
		public Group getGroup() { return cGroup; }

		//"transition"
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//guard=Or
		public Assignment getGuardAssignment_3() { return cGuardAssignment_3; }

		//Or
		public RuleCall getGuardOrParserRuleCall_3_0() { return cGuardOrParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//("label" label=QualifiedName)?
		public Group getGroup_5() { return cGroup_5; }

		//"label"
		public Keyword getLabelKeyword_5_0() { return cLabelKeyword_5_0; }

		//label=QualifiedName
		public Assignment getLabelAssignment_5_1() { return cLabelAssignment_5_1; }

		//QualifiedName
		public RuleCall getLabelQualifiedNameParserRuleCall_5_1_0() { return cLabelQualifiedNameParserRuleCall_5_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//actions+=Actions*
		public Assignment getActionsAssignment_7() { return cActionsAssignment_7; }

		//Actions
		public RuleCall getActionsActionsParserRuleCall_7_0() { return cActionsActionsParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Actions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPushParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPopParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// *  ========= Transition Content ============ * / Actions:
		//	Assignment | Push | Pop;
		public ParserRule getRule() { return rule; }

		//Assignment | Push | Pop
		public Alternatives getAlternatives() { return cAlternatives; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }

		//Push
		public RuleCall getPushParserRuleCall_1() { return cPushParserRuleCall_1; }

		//Pop
		public RuleCall getPopParserRuleCall_2() { return cPopParserRuleCall_2; }
	}

	public class PushElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Push");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cListListCrossReference_0_0 = (CrossReference)cListAssignment_0.eContents().get(0);
		private final RuleCall cListListQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cListListCrossReference_0_0.eContents().get(1);
		private final Keyword cPushKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueBitOrParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Push:
		//	list=[List|QualifiedName] ".push" "(" value=BitOr ")" ";";
		public ParserRule getRule() { return rule; }

		//list=[List|QualifiedName] ".push" "(" value=BitOr ")" ";"
		public Group getGroup() { return cGroup; }

		//list=[List|QualifiedName]
		public Assignment getListAssignment_0() { return cListAssignment_0; }

		//[List|QualifiedName]
		public CrossReference getListListCrossReference_0_0() { return cListListCrossReference_0_0; }

		//QualifiedName
		public RuleCall getListListQualifiedNameParserRuleCall_0_0_1() { return cListListQualifiedNameParserRuleCall_0_0_1; }

		//".push"
		public Keyword getPushKeyword_1() { return cPushKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//value=BitOr
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//BitOr
		public RuleCall getValueBitOrParserRuleCall_3_0() { return cValueBitOrParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class PopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cListListCrossReference_0_0 = (CrossReference)cListAssignment_0.eContents().get(0);
		private final RuleCall cListListQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cListListCrossReference_0_0.eContents().get(1);
		private final Keyword cPopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Pop:
		//	list=[List|QualifiedName] ".pop" "(" ")" ";";
		public ParserRule getRule() { return rule; }

		//list=[List|QualifiedName] ".pop" "(" ")" ";"
		public Group getGroup() { return cGroup; }

		//list=[List|QualifiedName]
		public Assignment getListAssignment_0() { return cListAssignment_0; }

		//[List|QualifiedName]
		public CrossReference getListListCrossReference_0_0() { return cListListCrossReference_0_0; }

		//QualifiedName
		public RuleCall getListListQualifiedNameParserRuleCall_0_0_1() { return cListListQualifiedNameParserRuleCall_0_0_1; }

		//".pop"
		public Keyword getPopKeyword_1() { return cPopKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftVarAccessParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightBitOrParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Assignment:
		//	left=VarAccess "=" right=BitOr ";";
		public ParserRule getRule() { return rule; }

		//left=VarAccess "=" right=BitOr ";"
		public Group getGroup() { return cGroup; }

		//left=VarAccess
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//VarAccess
		public RuleCall getLeftVarAccessParserRuleCall_0_0() { return cLeftVarAccessParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//right=BitOr
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//BitOr
		public RuleCall getRightBitOrParserRuleCall_2_0() { return cRightBitOrParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class VarAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarAccess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArrayVarAccessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VarAccess:
		//	ArrayVarAccess | VariableRef;
		public ParserRule getRule() { return rule; }

		//ArrayVarAccess | VariableRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//ArrayVarAccess
		public RuleCall getArrayVarAccessParserRuleCall_0() { return cArrayVarAccessParserRuleCall_0; }

		//VariableRef
		public RuleCall getVariableRefParserRuleCall_1() { return cVariableRefParserRuleCall_1; }
	}

	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableRef");
		private final Assignment cReferencedVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferencedVarVariableCrossReference_0 = (CrossReference)cReferencedVarAssignment.eContents().get(0);
		private final RuleCall cReferencedVarVariableQualifiedNameParserRuleCall_0_1 = (RuleCall)cReferencedVarVariableCrossReference_0.eContents().get(1);
		
		//VariableRef:
		//	referencedVar=[Variable|QualifiedName];
		public ParserRule getRule() { return rule; }

		//referencedVar=[Variable|QualifiedName]
		public Assignment getReferencedVarAssignment() { return cReferencedVarAssignment; }

		//[Variable|QualifiedName]
		public CrossReference getReferencedVarVariableCrossReference_0() { return cReferencedVarVariableCrossReference_0; }

		//QualifiedName
		public RuleCall getReferencedVarVariableQualifiedNameParserRuleCall_0_1() { return cReferencedVarVariableQualifiedNameParserRuleCall_0_1; }
	}

	public class ArrayVarAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayVarAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPrefixArrayPrefixCrossReference_0_0 = (CrossReference)cPrefixAssignment_0.eContents().get(0);
		private final RuleCall cPrefixArrayPrefixQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cPrefixArrayPrefixCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexBitOrParserRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayVarAccess:
		//	prefix=[ArrayPrefix|QualifiedName] "[" index=BitOr "]";
		public ParserRule getRule() { return rule; }

		//prefix=[ArrayPrefix|QualifiedName] "[" index=BitOr "]"
		public Group getGroup() { return cGroup; }

		//prefix=[ArrayPrefix|QualifiedName]
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }

		//[ArrayPrefix|QualifiedName]
		public CrossReference getPrefixArrayPrefixCrossReference_0_0() { return cPrefixArrayPrefixCrossReference_0_0; }

		//QualifiedName
		public RuleCall getPrefixArrayPrefixQualifiedNameParserRuleCall_0_0_1() { return cPrefixArrayPrefixQualifiedNameParserRuleCall_0_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//index=BitOr
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }

		//BitOr
		public RuleCall getIndexBitOrParserRuleCall_2_0() { return cIndexBitOrParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class BitOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitXorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryIntExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitXorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		/// * =====   Arithmetic expressions ===== * / / * ====== Opérateurs Bit à bit ======= * / BitOr returns IntExpression:
		//	BitXor ({BinaryIntExpression.left=current} op="|" right=BitXor)*;
		public ParserRule getRule() { return rule; }

		//BitXor ({BinaryIntExpression.left=current} op="|" right=BitXor)*
		public Group getGroup() { return cGroup; }

		//BitXor
		public RuleCall getBitXorParserRuleCall_0() { return cBitXorParserRuleCall_0; }

		//({BinaryIntExpression.left=current} op="|" right=BitXor)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryIntExpression.left=current}
		public Action getBinaryIntExpressionLeftAction_1_0() { return cBinaryIntExpressionLeftAction_1_0; }

		//op="|"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"|"
		public Keyword getOpVerticalLineKeyword_1_1_0() { return cOpVerticalLineKeyword_1_1_0; }

		//right=BitXor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BitXor
		public RuleCall getRightBitXorParserRuleCall_1_2_0() { return cRightBitXorParserRuleCall_1_2_0; }
	}

	public class BitXorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitXor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryIntExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpCircumflexAccentKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitXor returns IntExpression:
		//	BitAnd ({BinaryIntExpression.left=current} op="^" right=BitAnd)*;
		public ParserRule getRule() { return rule; }

		//BitAnd ({BinaryIntExpression.left=current} op="^" right=BitAnd)*
		public Group getGroup() { return cGroup; }

		//BitAnd
		public RuleCall getBitAndParserRuleCall_0() { return cBitAndParserRuleCall_0; }

		//({BinaryIntExpression.left=current} op="^" right=BitAnd)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryIntExpression.left=current}
		public Action getBinaryIntExpressionLeftAction_1_0() { return cBinaryIntExpressionLeftAction_1_0; }

		//op="^"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"^"
		public Keyword getOpCircumflexAccentKeyword_1_1_0() { return cOpCircumflexAccentKeyword_1_1_0; }

		//right=BitAnd
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BitAnd
		public RuleCall getRightBitAndParserRuleCall_1_2_0() { return cRightBitAndParserRuleCall_1_2_0; }
	}

	public class BitAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitShiftParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryIntExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitShiftParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitAnd returns IntExpression:
		//	BitShift ({BinaryIntExpression.left=current} op="&" right=BitShift)*;
		public ParserRule getRule() { return rule; }

		//BitShift ({BinaryIntExpression.left=current} op="&" right=BitShift)*
		public Group getGroup() { return cGroup; }

		//BitShift
		public RuleCall getBitShiftParserRuleCall_0() { return cBitShiftParserRuleCall_0; }

		//({BinaryIntExpression.left=current} op="&" right=BitShift)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryIntExpression.left=current}
		public Action getBinaryIntExpressionLeftAction_1_0() { return cBinaryIntExpressionLeftAction_1_0; }

		//op="&"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"&"
		public Keyword getOpAmpersandKeyword_1_1_0() { return cOpAmpersandKeyword_1_1_0; }

		//right=BitShift
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BitShift
		public RuleCall getRightBitShiftParserRuleCall_1_2_0() { return cRightBitShiftParserRuleCall_1_2_0; }
	}

	public class BitShiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitShift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryIntExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpLessThanSignLessThanSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitShift returns IntExpression:
		//	Addition ({BinaryIntExpression.left=current} op=("<<" | ">>") right=Addition)*;
		public ParserRule getRule() { return rule; }

		//Addition ({BinaryIntExpression.left=current} op=("<<" | ">>") right=Addition)*
		public Group getGroup() { return cGroup; }

		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }

		//({BinaryIntExpression.left=current} op=("<<" | ">>") right=Addition)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryIntExpression.left=current}
		public Action getBinaryIntExpressionLeftAction_1_0() { return cBinaryIntExpressionLeftAction_1_0; }

		//op=("<<" | ">>")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"<<" | ">>"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"<<"
		public Keyword getOpLessThanSignLessThanSignKeyword_1_1_0_0() { return cOpLessThanSignLessThanSignKeyword_1_1_0_0; }

		//">>"
		public Keyword getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1() { return cOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1; }

		//right=Addition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_2_0() { return cRightAdditionParserRuleCall_1_2_0; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryIntExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition returns IntExpression:
		//	Multiplication ({BinaryIntExpression.left=current} op=("+" | "-") right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication ({BinaryIntExpression.left=current} op=("+" | "-") right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//({BinaryIntExpression.left=current} op=("+" | "-") right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryIntExpression.left=current}
		public Action getBinaryIntExpressionLeftAction_1_0() { return cBinaryIntExpressionLeftAction_1_0; }

		//op=("+" | "-")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"+" | "-"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitComplementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryIntExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitComplementParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns IntExpression:
		//	BitComplement ({BinaryIntExpression.left=current} op=("/" | "*" | "%") right=BitComplement)*;
		public ParserRule getRule() { return rule; }

		//BitComplement ({BinaryIntExpression.left=current} op=("/" | "*" | "%") right=BitComplement)*
		public Group getGroup() { return cGroup; }

		//BitComplement
		public RuleCall getBitComplementParserRuleCall_0() { return cBitComplementParserRuleCall_0; }

		//({BinaryIntExpression.left=current} op=("/" | "*" | "%") right=BitComplement)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryIntExpression.left=current}
		public Action getBinaryIntExpressionLeftAction_1_0() { return cBinaryIntExpressionLeftAction_1_0; }

		//op=("/" | "*" | "%")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"/" | "*" | "%"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_1_0_0() { return cOpSolidusKeyword_1_1_0_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_1_0_1() { return cOpAsteriskKeyword_1_1_0_1; }

		//"%"
		public Keyword getOpPercentSignKeyword_1_1_0_2() { return cOpPercentSignKeyword_1_1_0_2; }

		//right=BitComplement
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BitComplement
		public RuleCall getRightBitComplementParserRuleCall_1_2_0() { return cRightBitComplementParserRuleCall_1_2_0; }
	}

	public class BitComplementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitComplement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTildeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cPowerParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Action cBitComplementValueAction_0_2 = (Action)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cPowerParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Action cUnaryMinusValueAction_1_2 = (Action)cGroup_1.eContents().get(2);
		private final RuleCall cPowerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BitComplement returns IntExpression:
		//	"~" Power {BitComplement.value=current} | "-" Power {UnaryMinus.value=current} | Power;
		public ParserRule getRule() { return rule; }

		//"~" Power {BitComplement.value=current} | "-" Power {UnaryMinus.value=current} | Power
		public Alternatives getAlternatives() { return cAlternatives; }

		//"~" Power {BitComplement.value=current}
		public Group getGroup_0() { return cGroup_0; }

		//"~"
		public Keyword getTildeKeyword_0_0() { return cTildeKeyword_0_0; }

		//Power
		public RuleCall getPowerParserRuleCall_0_1() { return cPowerParserRuleCall_0_1; }

		//{BitComplement.value=current}
		public Action getBitComplementValueAction_0_2() { return cBitComplementValueAction_0_2; }

		//"-" Power {UnaryMinus.value=current}
		public Group getGroup_1() { return cGroup_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }

		//Power
		public RuleCall getPowerParserRuleCall_1_1() { return cPowerParserRuleCall_1_1; }

		//{UnaryMinus.value=current}
		public Action getUnaryMinusValueAction_1_2() { return cUnaryMinusValueAction_1_2; }

		//Power
		public RuleCall getPowerParserRuleCall_2() { return cPowerParserRuleCall_2; }
	}

	public class PowerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Power");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryIntExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAsteriskAsteriskKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Power returns IntExpression:
		//	Primary ({BinaryIntExpression.left=current} op="**" right=Primary)*;
		public ParserRule getRule() { return rule; }

		//Primary ({BinaryIntExpression.left=current} op="**" right=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({BinaryIntExpression.left=current} op="**" right=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryIntExpression.left=current}
		public Action getBinaryIntExpressionLeftAction_1_0() { return cBinaryIntExpressionLeftAction_1_0; }

		//op="**"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"**"
		public Keyword getOpAsteriskAsteriskKeyword_1_1_0() { return cOpAsteriskAsteriskKeyword_1_1_0; }

		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPeekParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarAccessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cAlternatives.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_0_0 = (Group)cGroup_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_0_0_0 = (Keyword)cGroup_3_0_0.eContents().get(0);
		private final RuleCall cBitOrParserRuleCall_3_0_0_1 = (RuleCall)cGroup_3_0_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_0_0_2 = (Keyword)cGroup_3_0_0.eContents().get(2);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final RuleCall cWrapBoolExprParserRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		//Primary returns IntExpression:
		//	Peek | VarAccess | Constant | (=> ("(" BitOr ")") | "(" WrapBoolExpr ")");
		public ParserRule getRule() { return rule; }

		//Peek | VarAccess | Constant | (=> ("(" BitOr ")") | "(" WrapBoolExpr ")")
		public Alternatives getAlternatives() { return cAlternatives; }

		//Peek
		public RuleCall getPeekParserRuleCall_0() { return cPeekParserRuleCall_0; }

		//VarAccess
		public RuleCall getVarAccessParserRuleCall_1() { return cVarAccessParserRuleCall_1; }

		//Constant
		public RuleCall getConstantParserRuleCall_2() { return cConstantParserRuleCall_2; }

		//=> ("(" BitOr ")") | "(" WrapBoolExpr ")"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//=> ("(" BitOr ")")
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"(" BitOr ")"
		public Group getGroup_3_0_0() { return cGroup_3_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0_0_0() { return cLeftParenthesisKeyword_3_0_0_0; }

		//BitOr
		public RuleCall getBitOrParserRuleCall_3_0_0_1() { return cBitOrParserRuleCall_3_0_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_0_0_2() { return cRightParenthesisKeyword_3_0_0_2; }

		//"(" WrapBoolExpr ")"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1_0() { return cLeftParenthesisKeyword_3_1_0; }

		//WrapBoolExpr
		public RuleCall getWrapBoolExprParserRuleCall_3_1_1() { return cWrapBoolExprParserRuleCall_3_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_1_2() { return cRightParenthesisKeyword_3_1_2; }
	}

	public class WrapBoolExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WrapBoolExpr");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueOrParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//WrapBoolExpr:
		//	value=Or;
		public ParserRule getRule() { return rule; }

		//value=Or
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Or
		public RuleCall getValueOrParserRuleCall_0() { return cValueOrParserRuleCall_0; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Constant:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class PeekElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Peek");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cListListCrossReference_0_0 = (CrossReference)cListAssignment_0.eContents().get(0);
		private final RuleCall cListListQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cListListCrossReference_0_0.eContents().get(1);
		private final Keyword cPeekKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Peek:
		//	list=[List|QualifiedName] ".peek" "(" ")";
		public ParserRule getRule() { return rule; }

		//list=[List|QualifiedName] ".peek" "(" ")"
		public Group getGroup() { return cGroup; }

		//list=[List|QualifiedName]
		public Assignment getListAssignment_0() { return cListAssignment_0; }

		//[List|QualifiedName]
		public CrossReference getListListCrossReference_0_0() { return cListListCrossReference_0_0; }

		//QualifiedName
		public RuleCall getListListQualifiedNameParserRuleCall_0_0_1() { return cListListQualifiedNameParserRuleCall_0_0_1; }

		//".peek"
		public Keyword getPeekKeyword_1() { return cPeekKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or returns BooleanExpression:
		//	And ({Or.left=current} "||" right=And)*;
		public ParserRule getRule() { return rule; }

		//And ({Or.left=current} "||" right=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//({Or.left=current} "||" right=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNotParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And returns BooleanExpression:
		//	Not ({And.left=current} "&&" right=Not)*;
		public ParserRule getRule() { return rule; }

		//Not ({And.left=current} "&&" right=Not)*
		public Group getGroup() { return cGroup; }

		//Not
		public RuleCall getNotParserRuleCall_0() { return cNotParserRuleCall_0; }

		//({And.left=current} "&&" right=Not)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//right=Not
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Not
		public RuleCall getRightNotParserRuleCall_1_2_0() { return cRightNotParserRuleCall_1_2_0; }
	}

	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Not");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cPrimaryBoolParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Action cNotValueAction_0_2 = (Action)cGroup_0.eContents().get(2);
		private final RuleCall cPrimaryBoolParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Not returns BooleanExpression:
		//	"!" PrimaryBool {Not.value=current} | PrimaryBool;
		public ParserRule getRule() { return rule; }

		//"!" PrimaryBool {Not.value=current} | PrimaryBool
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!" PrimaryBool {Not.value=current}
		public Group getGroup_0() { return cGroup_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_0() { return cExclamationMarkKeyword_0_0; }

		//PrimaryBool
		public RuleCall getPrimaryBoolParserRuleCall_0_1() { return cPrimaryBoolParserRuleCall_0_1; }

		//{Not.value=current}
		public Action getNotValueAction_0_2() { return cNotValueAction_0_2; }

		//PrimaryBool
		public RuleCall getPrimaryBoolParserRuleCall_1() { return cPrimaryBoolParserRuleCall_1; }
	}

	public class PrimaryBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryBool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTrueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFalseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cOrParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//PrimaryBool returns BooleanExpression:
		//	True | False | => Comparison | "(" Or ")";
		public ParserRule getRule() { return rule; }

		//True | False | => Comparison | "(" Or ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//True
		public RuleCall getTrueParserRuleCall_0() { return cTrueParserRuleCall_0; }

		//False
		public RuleCall getFalseParserRuleCall_1() { return cFalseParserRuleCall_1; }

		//=> Comparison
		public RuleCall getComparisonParserRuleCall_2() { return cComparisonParserRuleCall_2; }

		//"(" Or ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//Or
		public RuleCall getOrParserRuleCall_3_1() { return cOrParserRuleCall_3_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftBitOrParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorComparisonOperatorsEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightBitOrParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Comparison:
		//	left=BitOr operator=ComparisonOperators right=BitOr;
		public ParserRule getRule() { return rule; }

		//left=BitOr operator=ComparisonOperators right=BitOr
		public Group getGroup() { return cGroup; }

		//left=BitOr
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//BitOr
		public RuleCall getLeftBitOrParserRuleCall_0_0() { return cLeftBitOrParserRuleCall_0_0; }

		//operator=ComparisonOperators
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//ComparisonOperators
		public RuleCall getOperatorComparisonOperatorsEnumRuleCall_1_0() { return cOperatorComparisonOperatorsEnumRuleCall_1_0; }

		//right=BitOr
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//BitOr
		public RuleCall getRightBitOrParserRuleCall_2_0() { return cRightBitOrParserRuleCall_2_0; }
	}

	public class TrueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "True");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueTrueKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//True:
		//	value="True";
		public ParserRule getRule() { return rule; }

		//value="True"
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"True"
		public Keyword getValueTrueKeyword_0() { return cValueTrueKeyword_0; }
	}

	public class FalseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "False");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueFalseKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//False:
		//	value="False";
		public ParserRule getRule() { return rule; }

		//value="False"
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"False"
		public Keyword getValueFalseKeyword_0() { return cValueFalseKeyword_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		/// * =====   Basic types ===== * / QualifiedName:
		//	ID ("." (INT | ID))*;
		public ParserRule getRule() { return rule; }

		//ID ("." (INT | ID))*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." (INT | ID))*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT | ID
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_0() { return cINTTerminalRuleCall_1_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }
	}

	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Integer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Integer returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	public class ComparisonOperatorsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ComparisonOperators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGTGreaterThanSignKeyword_0_0 = (Keyword)cGTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLTLessThanSignKeyword_1_0 = (Keyword)cLTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGEGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLELessThanSignEqualsSignKeyword_3_0 = (Keyword)cLEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEQEqualsSignEqualsSignKeyword_4_0 = (Keyword)cEQEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNEExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNEEnumLiteralDeclaration_5.eContents().get(0);
		
		/// * =====   Boolean expressions ===== * / // Not Equal
		//enum ComparisonOperators:
		//	GT=">" // Greater Thean
		//	// Lower Than
		//	// Greater or Equal
		//	// Lower or Equal
		//	// Equal
		//	| LT="<" | GE=">=" | LE="<=" | EQ="==" | NE="!=";
		public EnumRule getRule() { return rule; }

		//GT=">" // Greater Thean
		//// Lower Than
		//// Greater or Equal
		//// Lower or Equal
		//// Equal
		//| LT="<" | GE=">=" | LE="<=" | EQ="==" | NE="!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_0() { return cGTEnumLiteralDeclaration_0; }

		//">"
		public Keyword getGTGreaterThanSignKeyword_0_0() { return cGTGreaterThanSignKeyword_0_0; }

		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_1() { return cLTEnumLiteralDeclaration_1; }

		//"<"
		public Keyword getLTLessThanSignKeyword_1_0() { return cLTLessThanSignKeyword_1_0; }

		//GE=">="
		public EnumLiteralDeclaration getGEEnumLiteralDeclaration_2() { return cGEEnumLiteralDeclaration_2; }

		//">="
		public Keyword getGEGreaterThanSignEqualsSignKeyword_2_0() { return cGEGreaterThanSignEqualsSignKeyword_2_0; }

		//LE="<="
		public EnumLiteralDeclaration getLEEnumLiteralDeclaration_3() { return cLEEnumLiteralDeclaration_3; }

		//"<="
		public Keyword getLELessThanSignEqualsSignKeyword_3_0() { return cLELessThanSignEqualsSignKeyword_3_0; }

		//EQ="=="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_4() { return cEQEnumLiteralDeclaration_4; }

		//"=="
		public Keyword getEQEqualsSignEqualsSignKeyword_4_0() { return cEQEqualsSignEqualsSignKeyword_4_0; }

		//NE="!="
		public EnumLiteralDeclaration getNEEnumLiteralDeclaration_5() { return cNEEnumLiteralDeclaration_5; }

		//"!="
		public Keyword getNEExclamationMarkEqualsSignKeyword_5_0() { return cNEExclamationMarkEqualsSignKeyword_5_0; }
	}
	
	private SystemElements pSystem;
	private TransientElements pTransient;
	private VariableDeclarationElements pVariableDeclaration;
	private ArrayDeclarationElements pArrayDeclaration;
	private ListDeclarationElements pListDeclaration;
	private InitValuesElements pInitValues;
	private TransitionElements pTransition;
	private ActionsElements pActions;
	private PushElements pPush;
	private PopElements pPop;
	private AssignmentElements pAssignment;
	private VarAccessElements pVarAccess;
	private VariableRefElements pVariableRef;
	private ArrayVarAccessElements pArrayVarAccess;
	private BitOrElements pBitOr;
	private BitXorElements pBitXor;
	private BitAndElements pBitAnd;
	private BitShiftElements pBitShift;
	private AdditionElements pAddition;
	private MultiplicationElements pMultiplication;
	private BitComplementElements pBitComplement;
	private PowerElements pPower;
	private PrimaryElements pPrimary;
	private WrapBoolExprElements pWrapBoolExpr;
	private ConstantElements pConstant;
	private PeekElements pPeek;
	private ComparisonOperatorsElements unknownRuleComparisonOperators;
	private OrElements pOr;
	private AndElements pAnd;
	private NotElements pNot;
	private PrimaryBoolElements pPrimaryBool;
	private ComparisonElements pComparison;
	private TrueElements pTrue;
	private FalseElements pFalse;
	private QualifiedNameElements pQualifiedName;
	private IntegerElements pInteger;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public GalGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// **
	// * System
	// * / System:
	//	"GAL" name=QualifiedName "{" (variables+=VariableDeclaration* & arrays+=ArrayDeclaration* & lists+=ListDeclaration* &
	//	transitions+=Transition* & transient=Transient?) "}";
	public SystemElements getSystemAccess() {
		return (pSystem != null) ? pSystem : (pSystem = new SystemElements());
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}

	//Transient:
	//	"TRANSIENT" "=" value=Or ";";
	public TransientElements getTransientAccess() {
		return (pTransient != null) ? pTransient : (pTransient = new TransientElements());
	}
	
	public ParserRule getTransientRule() {
		return getTransientAccess().getRule();
	}

	/// * ============ System Content ================== * / //Ex: int abc = 10 ; 
	//VariableDeclaration returns Variable:
	//	"int" name=QualifiedName "=" value=Integer ";";
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	////Ex: array[1] tab = (2) ;
	//ArrayDeclaration returns ArrayPrefix:
	//	"array" "[" size=INT "]" name=QualifiedName "=" "(" values=InitValues? ")" ";";
	public ArrayDeclarationElements getArrayDeclarationAccess() {
		return (pArrayDeclaration != null) ? pArrayDeclaration : (pArrayDeclaration = new ArrayDeclarationElements());
	}
	
	public ParserRule getArrayDeclarationRule() {
		return getArrayDeclarationAccess().getRule();
	}

	//ListDeclaration returns List:
	//	"list" name=QualifiedName ("=" "(" values=InitValues? ")")? ";";
	public ListDeclarationElements getListDeclarationAccess() {
		return (pListDeclaration != null) ? pListDeclaration : (pListDeclaration = new ListDeclarationElements());
	}
	
	public ParserRule getListDeclarationRule() {
		return getListDeclarationAccess().getRule();
	}

	//InitValues:
	//	values+=Integer ("," values+=Integer)*;
	public InitValuesElements getInitValuesAccess() {
		return (pInitValues != null) ? pInitValues : (pInitValues = new InitValuesElements());
	}
	
	public ParserRule getInitValuesRule() {
		return getInitValuesAccess().getRule();
	}

	//Transition:
	//	"transition" name=QualifiedName "[" guard=Or "]" ("label" label=QualifiedName)? "{" actions+=Actions* "}";
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	/// *  ========= Transition Content ============ * / Actions:
	//	Assignment | Push | Pop;
	public ActionsElements getActionsAccess() {
		return (pActions != null) ? pActions : (pActions = new ActionsElements());
	}
	
	public ParserRule getActionsRule() {
		return getActionsAccess().getRule();
	}

	//Push:
	//	list=[List|QualifiedName] ".push" "(" value=BitOr ")" ";";
	public PushElements getPushAccess() {
		return (pPush != null) ? pPush : (pPush = new PushElements());
	}
	
	public ParserRule getPushRule() {
		return getPushAccess().getRule();
	}

	//Pop:
	//	list=[List|QualifiedName] ".pop" "(" ")" ";";
	public PopElements getPopAccess() {
		return (pPop != null) ? pPop : (pPop = new PopElements());
	}
	
	public ParserRule getPopRule() {
		return getPopAccess().getRule();
	}

	//Assignment:
	//	left=VarAccess "=" right=BitOr ";";
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//VarAccess:
	//	ArrayVarAccess | VariableRef;
	public VarAccessElements getVarAccessAccess() {
		return (pVarAccess != null) ? pVarAccess : (pVarAccess = new VarAccessElements());
	}
	
	public ParserRule getVarAccessRule() {
		return getVarAccessAccess().getRule();
	}

	//VariableRef:
	//	referencedVar=[Variable|QualifiedName];
	public VariableRefElements getVariableRefAccess() {
		return (pVariableRef != null) ? pVariableRef : (pVariableRef = new VariableRefElements());
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}

	//ArrayVarAccess:
	//	prefix=[ArrayPrefix|QualifiedName] "[" index=BitOr "]";
	public ArrayVarAccessElements getArrayVarAccessAccess() {
		return (pArrayVarAccess != null) ? pArrayVarAccess : (pArrayVarAccess = new ArrayVarAccessElements());
	}
	
	public ParserRule getArrayVarAccessRule() {
		return getArrayVarAccessAccess().getRule();
	}

	/// * =====   Arithmetic expressions ===== * / / * ====== Opérateurs Bit à bit ======= * / BitOr returns IntExpression:
	//	BitXor ({BinaryIntExpression.left=current} op="|" right=BitXor)*;
	public BitOrElements getBitOrAccess() {
		return (pBitOr != null) ? pBitOr : (pBitOr = new BitOrElements());
	}
	
	public ParserRule getBitOrRule() {
		return getBitOrAccess().getRule();
	}

	//BitXor returns IntExpression:
	//	BitAnd ({BinaryIntExpression.left=current} op="^" right=BitAnd)*;
	public BitXorElements getBitXorAccess() {
		return (pBitXor != null) ? pBitXor : (pBitXor = new BitXorElements());
	}
	
	public ParserRule getBitXorRule() {
		return getBitXorAccess().getRule();
	}

	//BitAnd returns IntExpression:
	//	BitShift ({BinaryIntExpression.left=current} op="&" right=BitShift)*;
	public BitAndElements getBitAndAccess() {
		return (pBitAnd != null) ? pBitAnd : (pBitAnd = new BitAndElements());
	}
	
	public ParserRule getBitAndRule() {
		return getBitAndAccess().getRule();
	}

	//BitShift returns IntExpression:
	//	Addition ({BinaryIntExpression.left=current} op=("<<" | ">>") right=Addition)*;
	public BitShiftElements getBitShiftAccess() {
		return (pBitShift != null) ? pBitShift : (pBitShift = new BitShiftElements());
	}
	
	public ParserRule getBitShiftRule() {
		return getBitShiftAccess().getRule();
	}

	//Addition returns IntExpression:
	//	Multiplication ({BinaryIntExpression.left=current} op=("+" | "-") right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns IntExpression:
	//	BitComplement ({BinaryIntExpression.left=current} op=("/" | "*" | "%") right=BitComplement)*;
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//BitComplement returns IntExpression:
	//	"~" Power {BitComplement.value=current} | "-" Power {UnaryMinus.value=current} | Power;
	public BitComplementElements getBitComplementAccess() {
		return (pBitComplement != null) ? pBitComplement : (pBitComplement = new BitComplementElements());
	}
	
	public ParserRule getBitComplementRule() {
		return getBitComplementAccess().getRule();
	}

	//Power returns IntExpression:
	//	Primary ({BinaryIntExpression.left=current} op="**" right=Primary)*;
	public PowerElements getPowerAccess() {
		return (pPower != null) ? pPower : (pPower = new PowerElements());
	}
	
	public ParserRule getPowerRule() {
		return getPowerAccess().getRule();
	}

	//Primary returns IntExpression:
	//	Peek | VarAccess | Constant | (=> ("(" BitOr ")") | "(" WrapBoolExpr ")");
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//WrapBoolExpr:
	//	value=Or;
	public WrapBoolExprElements getWrapBoolExprAccess() {
		return (pWrapBoolExpr != null) ? pWrapBoolExpr : (pWrapBoolExpr = new WrapBoolExprElements());
	}
	
	public ParserRule getWrapBoolExprRule() {
		return getWrapBoolExprAccess().getRule();
	}

	//Constant:
	//	value=INT;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//Peek:
	//	list=[List|QualifiedName] ".peek" "(" ")";
	public PeekElements getPeekAccess() {
		return (pPeek != null) ? pPeek : (pPeek = new PeekElements());
	}
	
	public ParserRule getPeekRule() {
		return getPeekAccess().getRule();
	}

	/// * =====   Boolean expressions ===== * / // Not Equal
	//enum ComparisonOperators:
	//	GT=">" // Greater Thean
	//	// Lower Than
	//	// Greater or Equal
	//	// Lower or Equal
	//	// Equal
	//	| LT="<" | GE=">=" | LE="<=" | EQ="==" | NE="!=";
	public ComparisonOperatorsElements getComparisonOperatorsAccess() {
		return (unknownRuleComparisonOperators != null) ? unknownRuleComparisonOperators : (unknownRuleComparisonOperators = new ComparisonOperatorsElements());
	}
	
	public EnumRule getComparisonOperatorsRule() {
		return getComparisonOperatorsAccess().getRule();
	}

	//Or returns BooleanExpression:
	//	And ({Or.left=current} "||" right=And)*;
	public OrElements getOrAccess() {
		return (pOr != null) ? pOr : (pOr = new OrElements());
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//And returns BooleanExpression:
	//	Not ({And.left=current} "&&" right=Not)*;
	public AndElements getAndAccess() {
		return (pAnd != null) ? pAnd : (pAnd = new AndElements());
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Not returns BooleanExpression:
	//	"!" PrimaryBool {Not.value=current} | PrimaryBool;
	public NotElements getNotAccess() {
		return (pNot != null) ? pNot : (pNot = new NotElements());
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}

	//PrimaryBool returns BooleanExpression:
	//	True | False | => Comparison | "(" Or ")";
	public PrimaryBoolElements getPrimaryBoolAccess() {
		return (pPrimaryBool != null) ? pPrimaryBool : (pPrimaryBool = new PrimaryBoolElements());
	}
	
	public ParserRule getPrimaryBoolRule() {
		return getPrimaryBoolAccess().getRule();
	}

	//Comparison:
	//	left=BitOr operator=ComparisonOperators right=BitOr;
	public ComparisonElements getComparisonAccess() {
		return (pComparison != null) ? pComparison : (pComparison = new ComparisonElements());
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//True:
	//	value="True";
	public TrueElements getTrueAccess() {
		return (pTrue != null) ? pTrue : (pTrue = new TrueElements());
	}
	
	public ParserRule getTrueRule() {
		return getTrueAccess().getRule();
	}

	//False:
	//	value="False";
	public FalseElements getFalseAccess() {
		return (pFalse != null) ? pFalse : (pFalse = new FalseElements());
	}
	
	public ParserRule getFalseRule() {
		return getFalseAccess().getRule();
	}

	/// * =====   Basic types ===== * / QualifiedName:
	//	ID ("." (INT | ID))*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Integer returns ecore::EInt:
	//	"-"? INT;
	public IntegerElements getIntegerAccess() {
		return (pInteger != null) ? pInteger : (pInteger = new IntegerElements());
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
