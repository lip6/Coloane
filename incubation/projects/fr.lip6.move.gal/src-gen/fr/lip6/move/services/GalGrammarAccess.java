/*
* generated by Xtext
*/

package fr.lip6.move.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GalGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_3_0 = (RuleCall)cVariablesAssignment_3.eContents().get(0);
		private final Assignment cTransitionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTransitionsTransitionParserRuleCall_4_0 = (RuleCall)cTransitionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//System:
		//	("GAL" name=QualifiedName "{" variables+=VariableDeclaration* transitions+=Transition+ "}")?;
		public ParserRule getRule() { return rule; }

		//("GAL" name=QualifiedName "{" variables+=VariableDeclaration* transitions+=Transition+ "}")?
		public Group getGroup() { return cGroup; }

		//"GAL"
		public Keyword getGALKeyword_0() { return cGALKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//variables+=VariableDeclaration*
		public Assignment getVariablesAssignment_3() { return cVariablesAssignment_3; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_3_0() { return cVariablesVariableDeclarationParserRuleCall_3_0; }

		//transitions+=Transition+
		public Assignment getTransitionsAssignment_4() { return cTransitionsAssignment_4; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_4_0() { return cTransitionsTransitionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInitValAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInitValINTTerminalRuleCall_0_2_0 = (RuleCall)cInitValAssignment_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cAnameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAnameQualifiedNameParserRuleCall_1_0_0 = (RuleCall)cAnameAssignment_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIndexAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIndexAdditionParserRuleCall_1_2_0 = (RuleCall)cIndexAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cInitValAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cInitValINTTerminalRuleCall_1_5_0 = (RuleCall)cInitValAssignment_1_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//VariableDeclaration returns Variable:
		//	name=QualifiedName "=" initVal=INT ";" | aname=QualifiedName "[" index=Addition "]" "=" initVal=INT ";";
		public ParserRule getRule() { return rule; }

		//name=QualifiedName "=" initVal=INT ";" | aname=QualifiedName "[" index=Addition "]" "=" initVal=INT ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=QualifiedName "=" initVal=INT ";"
		public Group getGroup_0() { return cGroup_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0_0() { return cNameQualifiedNameParserRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//initVal=INT
		public Assignment getInitValAssignment_0_2() { return cInitValAssignment_0_2; }

		//INT
		public RuleCall getInitValINTTerminalRuleCall_0_2_0() { return cInitValINTTerminalRuleCall_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_0_3() { return cSemicolonKeyword_0_3; }

		//aname=QualifiedName "[" index=Addition "]" "=" initVal=INT ";"
		public Group getGroup_1() { return cGroup_1; }

		//aname=QualifiedName
		public Assignment getAnameAssignment_1_0() { return cAnameAssignment_1_0; }

		//QualifiedName
		public RuleCall getAnameQualifiedNameParserRuleCall_1_0_0() { return cAnameQualifiedNameParserRuleCall_1_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }

		//index=Addition
		public Assignment getIndexAssignment_1_2() { return cIndexAssignment_1_2; }

		//Addition
		public RuleCall getIndexAdditionParserRuleCall_1_2_0() { return cIndexAdditionParserRuleCall_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }

		//"="
		public Keyword getEqualsSignKeyword_1_4() { return cEqualsSignKeyword_1_4; }

		//initVal=INT
		public Assignment getInitValAssignment_1_5() { return cInitValAssignment_1_5; }

		//INT
		public RuleCall getInitValINTTerminalRuleCall_1_5_0() { return cInitValINTTerminalRuleCall_1_5_0; }

		//";"
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGuardAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGuardOrParserRuleCall_3_0 = (RuleCall)cGuardAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLabelKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLabelAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cLabelAssignment_5_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAssignmentsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_7_0 = (RuleCall)cAssignmentsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Transition:
		//	"transition" name=ID "[" guard=Or "]" ("label" label=STRING)? "{" assignments+=Assignment+ "}";
		public ParserRule getRule() { return rule; }

		//"transition" name=ID "[" guard=Or "]" ("label" label=STRING)? "{" assignments+=Assignment+ "}"
		public Group getGroup() { return cGroup; }

		//"transition"
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//guard=Or
		public Assignment getGuardAssignment_3() { return cGuardAssignment_3; }

		//Or
		public RuleCall getGuardOrParserRuleCall_3_0() { return cGuardOrParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//("label" label=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"label"
		public Keyword getLabelKeyword_5_0() { return cLabelKeyword_5_0; }

		//label=STRING
		public Assignment getLabelAssignment_5_1() { return cLabelAssignment_5_1; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_5_1_0() { return cLabelSTRINGTerminalRuleCall_5_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//assignments+=Assignment+
		public Assignment getAssignmentsAssignment_7() { return cAssignmentsAssignment_7; }

		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_7_0() { return cAssignmentsAssignmentParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cVarAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVarVariableRefParserRuleCall_0_0_0 = (RuleCall)cVarAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprAdditionParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cAVarAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAVarVariableRefParserRuleCall_1_0_0 = (RuleCall)cAVarAssignment_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIndexAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIndexAdditionParserRuleCall_1_2_0 = (RuleCall)cIndexAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cExprAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cExprAdditionParserRuleCall_1_5_0 = (RuleCall)cExprAssignment_1_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//Assignment:
		//	var=VariableRef "=" expr=Addition ";" | aVar+=VariableRef "[" index=Addition "]" "=" expr=Addition //array variable
		//	";";
		public ParserRule getRule() { return rule; }

		//var=VariableRef "=" expr=Addition ";" | aVar+=VariableRef "[" index=Addition "]" "=" expr=Addition //array variable
		//";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//var=VariableRef "=" expr=Addition ";"
		public Group getGroup_0() { return cGroup_0; }

		//var=VariableRef
		public Assignment getVarAssignment_0_0() { return cVarAssignment_0_0; }

		//VariableRef
		public RuleCall getVarVariableRefParserRuleCall_0_0_0() { return cVarVariableRefParserRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//expr=Addition
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//Addition
		public RuleCall getExprAdditionParserRuleCall_0_2_0() { return cExprAdditionParserRuleCall_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_0_3() { return cSemicolonKeyword_0_3; }

		//aVar+=VariableRef "[" index=Addition "]" "=" expr=Addition //array variable
		//";"
		public Group getGroup_1() { return cGroup_1; }

		//aVar+=VariableRef
		public Assignment getAVarAssignment_1_0() { return cAVarAssignment_1_0; }

		//VariableRef
		public RuleCall getAVarVariableRefParserRuleCall_1_0_0() { return cAVarVariableRefParserRuleCall_1_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }

		//index=Addition
		public Assignment getIndexAssignment_1_2() { return cIndexAssignment_1_2; }

		//Addition
		public RuleCall getIndexAdditionParserRuleCall_1_2_0() { return cIndexAdditionParserRuleCall_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }

		//"="
		public Keyword getEqualsSignKeyword_1_4() { return cEqualsSignKeyword_1_4; }

		//expr=Addition
		public Assignment getExprAssignment_1_5() { return cExprAssignment_1_5; }

		//Addition
		public RuleCall getExprAdditionParserRuleCall_1_5_0() { return cExprAdditionParserRuleCall_1_5_0; }

		////array variable
		//";"
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cAdditionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cSubtractionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// Moins prioritaire --> + prioritaire
		//// addition {ou soustraction} --> multiplication
		//Addition returns IntExpression:
		//	Multiplication (({Addition.left=current} "+" | {Subtraction.left=current} "-") right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication (({Addition.left=current} "+" | {Subtraction.left=current} "-") right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//(({Addition.left=current} "+" | {Subtraction.left=current} "-") right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Addition.left=current} "+" | {Subtraction.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Addition.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0_0_0() { return cAdditionLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Subtraction.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Subtraction.left=current}
		public Action getSubtractionLeftAction_1_0_1_0() { return cSubtractionLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitaryMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiplicationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivisionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cModuloLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnitaryMinusParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication returns IntExpression:
		//	UnitaryMinus (({Multiplication.left=current} "*" | {Division.left=current} "/" | {Modulo.left=current} "%")
		//	right=UnitaryMinus)*;
		public ParserRule getRule() { return rule; }

		//UnitaryMinus (({Multiplication.left=current} "*" | {Division.left=current} "/" | {Modulo.left=current} "%")
		//right=UnitaryMinus)*
		public Group getGroup() { return cGroup; }

		//UnitaryMinus
		public RuleCall getUnitaryMinusParserRuleCall_0() { return cUnitaryMinusParserRuleCall_0; }

		//(({Multiplication.left=current} "*" | {Division.left=current} "/" | {Modulo.left=current} "%") right=UnitaryMinus)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multiplication.left=current} "*" | {Division.left=current} "/" | {Modulo.left=current} "%"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multiplication.left=current} "*"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0_0_0() { return cMultiplicationLeftAction_1_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }

		//{Division.left=current} "/"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Division.left=current}
		public Action getDivisionLeftAction_1_0_1_0() { return cDivisionLeftAction_1_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }

		//{Modulo.left=current} "%"
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{Modulo.left=current}
		public Action getModuloLeftAction_1_0_2_0() { return cModuloLeftAction_1_0_2_0; }

		//"%"
		public Keyword getPercentSignKeyword_1_0_2_1() { return cPercentSignKeyword_1_0_2_1; }

		//right=UnitaryMinus
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UnitaryMinus
		public RuleCall getRightUnitaryMinusParserRuleCall_1_1_0() { return cRightUnitaryMinusParserRuleCall_1_1_0; }
	}

	public class UnitaryMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitaryMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPowerParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Action cUnitaryMinusValAction_2 = (Action)cGroup.eContents().get(2);
		
		//UnitaryMinus returns IntExpression:
		//	"-"? Power {UnitaryMinus.val=current};
		public ParserRule getRule() { return rule; }

		//"-"? Power {UnitaryMinus.val=current}
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//Power
		public RuleCall getPowerParserRuleCall_1() { return cPowerParserRuleCall_1; }

		//{UnitaryMinus.val=current}
		public Action getUnitaryMinusValAction_2() { return cUnitaryMinusValAction_2; }
	}

	public class PowerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Power");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPowerLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Power returns IntExpression:
		//	Primary ({Power.left=current} "**" right=Primary)*;
		public ParserRule getRule() { return rule; }

		//Primary ({Power.left=current} "**" right=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({Power.left=current} "**" right=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{Power.left=current}
		public Action getPowerLeftAction_1_0() { return cPowerLeftAction_1_0; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_1_1() { return cAsteriskAsteriskKeyword_1_1; }

		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstanteParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Primary returns IntExpression:
		//	VariableRef | Constante | "(" Addition ")";
		public ParserRule getRule() { return rule; }

		//VariableRef | Constante | "(" Addition ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableRef
		public RuleCall getVariableRefParserRuleCall_0() { return cVariableRefParserRuleCall_0; }

		//Constante
		public RuleCall getConstanteParserRuleCall_1() { return cConstanteParserRuleCall_1; }

		//"(" Addition ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//Addition
		public RuleCall getAdditionParserRuleCall_2_1() { return cAdditionParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class ConstanteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constante");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//Constante:
		//	val=INT;
		public ParserRule getRule() { return rule; }

		//val=INT
		public Assignment getValAssignment() { return cValAssignment; }

		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}

	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableRef");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVariableCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVariableIDTerminalRuleCall_0_1 = (RuleCall)cVarVariableCrossReference_0.eContents().get(1);
		
		//VariableRef:
		//	var=[Variable];
		public ParserRule getRule() { return rule; }

		//var=[Variable]
		public Assignment getVarAssignment() { return cVarAssignment; }

		//[Variable]
		public CrossReference getVarVariableCrossReference_0() { return cVarVariableCrossReference_0; }

		//ID
		public RuleCall getVarVariableIDTerminalRuleCall_0_1() { return cVarVariableIDTerminalRuleCall_0_1; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////
		//// moins prioritaire --> plus prioritaire
		//// Or --> And --> Not
		//Or returns BooleanExpression:
		//	And ({Or.left=current} "||" right=And)*;
		public ParserRule getRule() { return rule; }

		//And ({Or.left=current} "||" right=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//({Or.left=current} "||" right=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNotParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And returns BooleanExpression:
		//	Not ({And.left=current} "&&" right=Not)*;
		public ParserRule getRule() { return rule; }

		//Not ({And.left=current} "&&" right=Not)*
		public Group getGroup() { return cGroup; }

		//Not
		public RuleCall getNotParserRuleCall_0() { return cNotParserRuleCall_0; }

		//({And.left=current} "&&" right=Not)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//right=Not
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Not
		public RuleCall getRightNotParserRuleCall_1_2_0() { return cRightNotParserRuleCall_1_2_0; }
	}

	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cPrimaryBoolParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cComparisonParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Action cNotValAction_2 = (Action)cGroup.eContents().get(2);
		
		//Not returns BooleanExpression:
		//	"!"? (PrimaryBool | Comparison) {Not.val=current};
		public ParserRule getRule() { return rule; }

		//"!"? (PrimaryBool | Comparison) {Not.val=current}
		public Group getGroup() { return cGroup; }

		//"!"?
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//PrimaryBool | Comparison
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//PrimaryBool
		public RuleCall getPrimaryBoolParserRuleCall_1_0() { return cPrimaryBoolParserRuleCall_1_0; }

		//Comparison
		public RuleCall getComparisonParserRuleCall_1_1() { return cComparisonParserRuleCall_1_1; }

		//{Not.val=current}
		public Action getNotValAction_2() { return cNotValAction_2; }
	}

	public class PrimaryBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryBool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTrueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFalseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimaryBool returns BooleanExpression:
		//	True | False;
		public ParserRule getRule() { return rule; }

		//True | False
		public Alternatives getAlternatives() { return cAlternatives; }

		//True
		public RuleCall getTrueParserRuleCall_0() { return cTrueParserRuleCall_0; }

		//False
		public RuleCall getFalseParserRuleCall_1() { return cFalseParserRuleCall_1; }
	}

	public class TrueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "True");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueTrueKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//True:
		//	value="True";
		public ParserRule getRule() { return rule; }

		//value="True"
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"True"
		public Keyword getValueTrueKeyword_0() { return cValueTrueKeyword_0; }
	}

	public class FalseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "False");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueFalseKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//False:
		//	value="False";
		public ParserRule getRule() { return rule; }

		//value="False"
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"False"
		public Keyword getValueFalseKeyword_0() { return cValueFalseKeyword_0; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAdditionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorCompOperatorsParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightAdditionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Comparison returns BooleanExpression:
		//	left=Addition operator=CompOperators right=Addition;
		public ParserRule getRule() { return rule; }

		//left=Addition operator=CompOperators right=Addition
		public Group getGroup() { return cGroup; }

		//left=Addition
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Addition
		public RuleCall getLeftAdditionParserRuleCall_0_0() { return cLeftAdditionParserRuleCall_0_0; }

		//operator=CompOperators
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//CompOperators
		public RuleCall getOperatorCompOperatorsParserRuleCall_1_0() { return cOperatorCompOperatorsParserRuleCall_1_0; }

		//right=Addition
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//Addition
		public RuleCall getRightAdditionParserRuleCall_2_0() { return cRightAdditionParserRuleCall_2_0; }
	}

	public class CompOperatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompOperators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExclamationMarkEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//CompOperators:
		//	"<" | ">" | ">=" | "<=" | "==" | "!=";
		public ParserRule getRule() { return rule; }

		//"<" | ">" | ">=" | "<=" | "==" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_4() { return cEqualsSignEqualsSignKeyword_4; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_5() { return cExclamationMarkEqualsSignKeyword_5; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////BooleanOperation returns BooleanExpression:
		////    '(' Or ')'
		////;
		////les imports
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cQualifiedNameWithWildCardParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Import:
		//	"import" QualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" QualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//QualifiedNameWithWildCard
		public RuleCall getQualifiedNameWithWildCardParserRuleCall_1() { return cQualifiedNameWithWildCardParserRuleCall_1; }
	}
	
	
	private SystemElements pSystem;
	private VariableDeclarationElements pVariableDeclaration;
	private TransitionElements pTransition;
	private AssignmentElements pAssignment;
	private AdditionElements pAddition;
	private MultiplicationElements pMultiplication;
	private UnitaryMinusElements pUnitaryMinus;
	private PowerElements pPower;
	private PrimaryElements pPrimary;
	private ConstanteElements pConstante;
	private VariableRefElements pVariableRef;
	private OrElements pOr;
	private AndElements pAnd;
	private NotElements pNot;
	private PrimaryBoolElements pPrimaryBool;
	private TrueElements pTrue;
	private FalseElements pFalse;
	private ComparisonElements pComparison;
	private CompOperatorsElements pCompOperators;
	private QualifiedNameElements pQualifiedName;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private ImportElements pImport;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public GalGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//System:
	//	("GAL" name=QualifiedName "{" variables+=VariableDeclaration* transitions+=Transition+ "}")?;
	public SystemElements getSystemAccess() {
		return (pSystem != null) ? pSystem : (pSystem = new SystemElements());
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}

	//VariableDeclaration returns Variable:
	//	name=QualifiedName "=" initVal=INT ";" | aname=QualifiedName "[" index=Addition "]" "=" initVal=INT ";";
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//Transition:
	//	"transition" name=ID "[" guard=Or "]" ("label" label=STRING)? "{" assignments+=Assignment+ "}";
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//Assignment:
	//	var=VariableRef "=" expr=Addition ";" | aVar+=VariableRef "[" index=Addition "]" "=" expr=Addition //array variable
	//	";";
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//// Moins prioritaire --> + prioritaire
	//// addition {ou soustraction} --> multiplication
	//Addition returns IntExpression:
	//	Multiplication (({Addition.left=current} "+" | {Subtraction.left=current} "-") right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns IntExpression:
	//	UnitaryMinus (({Multiplication.left=current} "*" | {Division.left=current} "/" | {Modulo.left=current} "%")
	//	right=UnitaryMinus)*;
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//UnitaryMinus returns IntExpression:
	//	"-"? Power {UnitaryMinus.val=current};
	public UnitaryMinusElements getUnitaryMinusAccess() {
		return (pUnitaryMinus != null) ? pUnitaryMinus : (pUnitaryMinus = new UnitaryMinusElements());
	}
	
	public ParserRule getUnitaryMinusRule() {
		return getUnitaryMinusAccess().getRule();
	}

	//Power returns IntExpression:
	//	Primary ({Power.left=current} "**" right=Primary)*;
	public PowerElements getPowerAccess() {
		return (pPower != null) ? pPower : (pPower = new PowerElements());
	}
	
	public ParserRule getPowerRule() {
		return getPowerAccess().getRule();
	}

	//Primary returns IntExpression:
	//	VariableRef | Constante | "(" Addition ")";
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//Constante:
	//	val=INT;
	public ConstanteElements getConstanteAccess() {
		return (pConstante != null) ? pConstante : (pConstante = new ConstanteElements());
	}
	
	public ParserRule getConstanteRule() {
		return getConstanteAccess().getRule();
	}

	//VariableRef:
	//	var=[Variable];
	public VariableRefElements getVariableRefAccess() {
		return (pVariableRef != null) ? pVariableRef : (pVariableRef = new VariableRefElements());
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}

	///////////////////////////////////////////////////////////////////////
	//// moins prioritaire --> plus prioritaire
	//// Or --> And --> Not
	//Or returns BooleanExpression:
	//	And ({Or.left=current} "||" right=And)*;
	public OrElements getOrAccess() {
		return (pOr != null) ? pOr : (pOr = new OrElements());
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//And returns BooleanExpression:
	//	Not ({And.left=current} "&&" right=Not)*;
	public AndElements getAndAccess() {
		return (pAnd != null) ? pAnd : (pAnd = new AndElements());
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Not returns BooleanExpression:
	//	"!"? (PrimaryBool | Comparison) {Not.val=current};
	public NotElements getNotAccess() {
		return (pNot != null) ? pNot : (pNot = new NotElements());
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}

	//PrimaryBool returns BooleanExpression:
	//	True | False;
	public PrimaryBoolElements getPrimaryBoolAccess() {
		return (pPrimaryBool != null) ? pPrimaryBool : (pPrimaryBool = new PrimaryBoolElements());
	}
	
	public ParserRule getPrimaryBoolRule() {
		return getPrimaryBoolAccess().getRule();
	}

	//True:
	//	value="True";
	public TrueElements getTrueAccess() {
		return (pTrue != null) ? pTrue : (pTrue = new TrueElements());
	}
	
	public ParserRule getTrueRule() {
		return getTrueAccess().getRule();
	}

	//False:
	//	value="False";
	public FalseElements getFalseAccess() {
		return (pFalse != null) ? pFalse : (pFalse = new FalseElements());
	}
	
	public ParserRule getFalseRule() {
		return getFalseAccess().getRule();
	}

	//Comparison returns BooleanExpression:
	//	left=Addition operator=CompOperators right=Addition;
	public ComparisonElements getComparisonAccess() {
		return (pComparison != null) ? pComparison : (pComparison = new ComparisonElements());
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//CompOperators:
	//	"<" | ">" | ">=" | "<=" | "==" | "!=";
	public CompOperatorsElements getCompOperatorsAccess() {
		return (pCompOperators != null) ? pCompOperators : (pCompOperators = new CompOperatorsElements());
	}
	
	public ParserRule getCompOperatorsRule() {
		return getCompOperatorsAccess().getRule();
	}

	////BooleanOperation returns BooleanExpression:
	////    '(' Or ')'
	////;
	////les imports
	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//Import:
	//	"import" QualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
