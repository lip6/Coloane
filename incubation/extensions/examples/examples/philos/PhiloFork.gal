
gal Philo {
	int think = 1 ;
	int hungry = 0 ;
	int waitL = 0 ;
	int waitR = 0 ;
	int hasL = 0 ;
	int hasR = 0 ;

	transition beHungry [think >= 1] {
		think = think - 1 ;
		hungry = hungry + 1 ;
	}

	transition ask [hungry >= 1] {
		hungry = hungry - 1 ;
		waitR = waitR + 1 ;
		waitL = waitL + 1 ;
	}

	transition getL [waitL >= 1] label "getL" {
		hasL = hasL + 1 ;
		waitL = waitL - 1 ;
	}

	transition getR [waitR >= 1] label "getR" {
		waitR = waitR - 1 ;
		hasR = hasR + 1 ;
	}

	transition eat [hasR >= 1 && hasL >= 1] label "eat" {
		think = think + 1 ;
		hasL = hasL - 1 ;
		hasR = hasR - 1 ;
	}
}

gal Fork {
	int fork = 1 ;

	transition getFork [fork >= 1] label "getFork" {
		fork = fork - 1 ;
	}

	transition putFork [true] label "putFork" {
		fork = fork + 1 ;
	}
}

composite PhiloFork {
	gal Fork f;
	gal Philo p;
	
	
	synchronization getFork label "getFork" {
		f."getFork";	
	}
	
	synchronization putFork label "putFork" {
		f."putFork";	
	}
	
	synchronization eat label "putR" {
		p."eat";
		f."putFork";
	}
	
	synchronization getR label "getR" {
		p."getR";
	}
	
	synchronization intGet label "" {
		p."getL";
		f."getFork";
	}
}

composite TwoPhils {
	composite PhiloFork pf1;
	composite PhiloFork pf2;
	
	synchronization getFork label "getFork" {
		pf1."getFork";		
	}

	synchronization putFork label "putFork" {
		pf1."putFork";		
	}
	
	synchronization intGet label "" {
		pf2."getFork";
		pf1."getR";
	}
	
	synchronization intPut label "" {
		pf2."putFork";
		pf1."putR";
	}

	synchronization getR label "getR" {
		pf2."getR";		
	}

	synchronization putR label "putR" {
		pf2."putR";		
	}

}


composite closeLoop {
	
	composite TwoPhils phils;
	
	synchronization closeGet label "" {
		phils."getFork";
		phils."getR";
	}

	synchronization closePut label "" {
		phils."putFork";
		phils."putR";	
	}
	
}

main closeLoop ;