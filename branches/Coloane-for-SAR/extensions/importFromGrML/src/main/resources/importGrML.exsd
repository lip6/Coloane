<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="fr.lip6.move.coloane.extensions.importGrML" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="fr.lip6.move.coloane.extensions.importGrML" id="importGrML" name="importGrML"/>
      </appinfo>
      <documentation>
         [Enter description of this extension point.]
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence minOccurs="0" maxOccurs="unbounded">
            <element ref="converter"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="converter">
      <annotation>
         <documentation>
            A converter is either a &apos;raw converter&apos;, that is a java class fully written by the developper, or a &apos;semi-automatic converter&apos; that is configured in the extension.

The &apos;semi automatic&apos; should be preferred when possible.
         </documentation>
      </annotation>
      <complexType>
         <choice>
            <element ref="raw-converter"/>
            <element ref="semi-automatic-converter"/>
         </choice>
      </complexType>
   </element>

   <element name="raw-converter">
      <annotation>
         <documentation>
            A raw converter is defined by a list of handled fml formalisms (for Alligator) and a conversion class called &apos;handler&apos;.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="formalism"/>
         </sequence>
         <attribute name="handler" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":fr.lip6.move.coloane.extensions.importgrml.ModelHandler"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="formalism">
      <complexType>
         <attribute name="fml-url" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="semi-automatic-converter">
      <annotation>
         <documentation>
            A semi automatic converter is defined by:
- a map of formalism translations, that show the correspondance between fml formalisms and coloane formalisms;
- a map of node conversions, that show the correspondance between fml node types and coloane node types (if a node type does not appear, the same type is used);
- a map of arc conversions, that show the correspondance between fml arc types and coloane arc types (if a n arc type does not appear, the same type is used);
- a map of attribute convesions;
- a set of post-processing handlers.
         </documentation>
      </annotation>
      <complexType>
         <sequence minOccurs="0" maxOccurs="unbounded">
            <element ref="formalism-conversion"/>
            <element ref="node-conversion"/>
            <element ref="arc-conversion"/>
            <element ref="attribute-conversion"/>
            <element ref="post-processing"/>
         </sequence>
      </complexType>
   </element>

   <element name="formalism-conversion">
      <complexType>
         <attribute name="fml-url" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="coloane-formalism-id" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="node-conversion">
      <complexType>
         <attribute name="fml-node-type" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="coloane-node-type" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="arc-conversion">
      <complexType>
         <attribute name="fml-arc-type" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="coloane-asc-type" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="attribute-conversion">
      <annotation>
         <documentation>
            The conversion of attributes requires work for the developper, as it cannot be automated. GrML attributes are trees of abstract syftax, whereas coloane attributes are plain texe of concrete syntax.
The mapping stores the fml attribute name, the corresponding coloane attribute name  (if it differs), the attribute container (empty or node type, or arc type), and a conversion handler that translates the tree into text.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="fml-attribute-type" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="coloane-attribute-type" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="container" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="handler" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":fr.lip6.move.coloane.extensions.importgrml.AttributeHandler"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="post-processing">
      <complexType>
         <attribute name="handler" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":fr.lip6.move.coloane.extensions.importgrml.PostProcessingHandler"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         [Enter the first release in which this extension point appears.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiinfo"/>
      </appinfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>


</schema>
