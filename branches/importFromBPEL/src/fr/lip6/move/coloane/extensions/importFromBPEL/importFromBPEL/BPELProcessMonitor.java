package fr.lip6.move.coloane.extensions.importFromBPEL.importFromBPEL;

import fr.lip6.move.coloane.extensions.importFromBPEL.importFromBPEL.SOAPMonitorApplet.SOAPMonitorData;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

/**
 * A BPEL Process Monitor (hand-write)
 * used to make sure what kind of monitors
 * should be generated by the phase Monitor Generation.
 * 
 * author: Jun ZHU (LIP6,UPMC, France & School of Computer Science, NUDT, China)
 * e-mail: mail.zhujun@gmail.com
 * create date: 04-05-2009
 */

public class BPELProcessMonitor {
	
	// Define the Incidence Matrix of Petri Nets
	// in a vector Matrix[][]
	// ** Monitor Generation **
	// It is required to define the incidence matrix 
	// with varibles m and n to define the matrix.
	// ## Monitor Generation ##
//	int[][] Matrix = new int[10][15];
	
	// Define ProcessAnalyzer return Event type
	final   static	int  E_Normal = -1;		// Event: Normal Execution
	final 	int  E_Exception = 1;	// Event: Exception happens
	
	final	static	int  MSG_Receive = 0;
	final	static	int  MSG_InvokeOneWay = 1;
	final	static	int  MSG_2_Receive = 2;
	final	static	int  MSG_InvokeReqRep_Req =3;
	final	static	int  MSG_InvokeReqRep_Res = 4;
	
	int	num_P = 14;
//	int[] stateCurrent = new int[num_P];
	int stateCurrent = 3;
	
	
	/**
	 * The method ProcessAnalyzer() is coded,
	 * according to DemoTestCase "DemoTestCase(Mixed).bpel".
	 * It is used to make out how to generate a monitor from
	 * Petri net model.
	 * 
	 * @param msgID
	 * @return
	 */
	public int ProcessAnalyzer(int msgID){
//		int EventType = E_Normal;
		
		System.out.println("Current State: " + stateCurrent + " and msgID:" + msgID);
		switch (stateCurrent) {
		  case 0:
		  {
		        if(msgID == MSG_Receive)
		        {
		        	stateCurrent = 4;
		        	System.out.println("Change Current State into " + stateCurrent);
		        	break;
		        }
		        else
		        {
		        	return stateCurrent;
		        }
		        
		  }
		  case 4:
		  {
		        if(msgID == MSG_InvokeOneWay)
		        {
		        	stateCurrent = 6;
		        	System.out.println("Change Current State into " + stateCurrent);
		        	break;
		        }
		        else
		        {
		        	return stateCurrent;
		        }
		        
		  }
		  case 6:
		  {
		        if(msgID == MSG_2_Receive)
		        {
		        	stateCurrent = 9;
		        	System.out.println("Change Current State into " + stateCurrent);
		        	break;
		        }
		        else
		        {
		        	return stateCurrent;
		        }
		        
		  }
		  case 9:
		  {
		        if(msgID == MSG_InvokeReqRep_Req)
		        {
		        	stateCurrent = 11;
		        	System.out.println("Change Current State into " + stateCurrent);
		        	break;
		        }
		        else
		        {
		        	return stateCurrent;
		        }
		        
		  }  
		  
		  case 11:
		  {
		        if(msgID == MSG_InvokeReqRep_Res)
		        {
		        	stateCurrent = 0;
		        	System.out.println("Change Current State into " + stateCurrent);
		        	break;
		        }
		        else
		        {
		        	return stateCurrent;
		        }
		        
		  } 
		  default:
			  return stateCurrent;
		}
		
		return E_Normal;
	}
	
	public void monitor(int msgID){
		int checkResult = 0;
		
		checkResult = ProcessAnalyzer1(msgID);
		
		if(checkResult!=E_Normal){
			System.out.println("ALARM: Process Error!" );
			System.out.println("Monitor: error happens in state " + checkResult +" with received event " + msgID);
		}
		
	}
	
	
	// After receiving a SOAP message, this function will be called
	// to analyze the message. And assign this message with a integer.
	// It will be used by process monitor. (different process has different MSG type ID sets)
	public int AnalyzeMessage(String data){
		int msgID =0;		
		 SAXReader xmlReader = new SAXReader();		    
		 try {
			Document doc = xmlReader.read(data);
			
		} catch (DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}// Read XML files
		
		return msgID;
	}
	
	public static void main(String[] args) {
		
		BPELProcessMonitor testCase = new BPELProcessMonitor();
		
//		// ****************************************
//		// For test ProcessAnalyzer()
		// for Test case "DemoTestCase(Mixed).bpel"
//		// Correct 
//		for(int i=0;i<10;i++){
//			testCase.monitor(MSG_Receive);
//			testCase.monitor(MSG_InvokeOneWay);
//			testCase.monitor(MSG_2_Receive);
//			testCase.monitor(MSG_InvokeReqRep_Req);
//			testCase.monitor(MSG_InvokeReqRep_Res);
//		}
//		
//		// Incorrect 
//		for(int i=0;i<2;i++){
//			testCase.monitor(MSG_Receive);
//			testCase.monitor(MSG_InvokeReqRep_Req);
//			testCase.monitor(MSG_2_Receive);
//			testCase.monitor(MSG_InvokeReqRep_Req);
//			testCase.monitor(MSG_InvokeReqRep_Res);
//		}
//		// **********************************************
		
		
		
		// ****************************************
		// For test ProcessAnalyzer1()
		// Test case "DemoTestCase(Mixed-Switch).bpel"
		// Correct 
//		for(int i=0;i<10;i++){
			testCase.monitor(1);
			testCase.monitor(6);
			testCase.monitor(4);
			testCase.monitor(5);
			testCase.monitor(6);
//		}
		
		// Incorrect 
//		for(int i=0;i<2;i++){
//			testCase.monitor(1);
//			testCase.monitor(3);
//			testCase.monitor(2);
//			testCase.monitor(5);
//			testCase.monitor(6);
//		}
		// **********************************************
		
		
	}
	
	
	public int ProcessAnalyzer1(int msgID){
		System.out.println("Current State: " + stateCurrent + " and msgID:" + msgID);
		int P_0_0_Receive_MSG = 1;
		int P_0_1_0_0_InvokeOneWay_MSG = 2;
		int P_0_1_1_1_Receive_MSG = 3;
		int P_0_1_1_2_Reply_MSG = 4;
		int P_0_2_InvokeReqRep_Req_MSG = 5;
		int P_0_2_InvokeReqRep_Res_MSG = 6;
		switch (stateCurrent) {case 3:
		{ if(msgID == P_0_0_Receive_MSG){
		stateCurrent = 5;
		System.out.println("Change Current State into " + stateCurrent);
		break;
		}
		else
		{
		return stateCurrent;
		}
		}
		case 5:
		{ if(msgID == P_0_1_0_0_InvokeOneWay_MSG){
		stateCurrent = 13;
		System.out.println("Change Current State into " + stateCurrent);
		break;
		}else if(msgID == P_0_1_1_1_Receive_MSG){
		stateCurrent = 20;
		System.out.println("Change Current State into " + stateCurrent);
		break;
		}
		}
		case 20:
		{ if(msgID == P_0_1_1_2_Reply_MSG){
		stateCurrent = 13;
		System.out.println("Change Current State into " + stateCurrent);
		break;
		}
		else
		{
		return stateCurrent;
		}
		}
		case 13:
		{ if(msgID == P_0_2_InvokeReqRep_Req_MSG){
		stateCurrent = 48;
		System.out.println("Change Current State into " + stateCurrent);
		break;
		}
		else
		{
		return stateCurrent;
		}
		}
		case 48:
		{ if(msgID == P_0_2_InvokeReqRep_Res_MSG){
		stateCurrent = 51;
		System.out.println("Change Current State into " + stateCurrent);
		break;
		}
		else
		{
		return stateCurrent;
		}
		}

		default:
		{
		return stateCurrent;
		}
		}
		return E_Normal;
		}
	
	public int ProcessAnalyzer2(int msgID){
		System.out.println("Current State: " + stateCurrent + " and msgID:" + msgID);
		int P_0_2_Reply_MSG = 1;
		int P_0_0_InvokeOneWay_MSG = 2;
		int P_0_1_Receive_MSG = 3;
		switch (stateCurrent) {
		case 12:

		 { if(msgID == P_0_2_Reply_MSG){
		stateCurrent = 19;
		System.out.println("Change Current State into " + stateCurrent);
		break;
		}else
		{
		return stateCurrent;
		}
		}

		case 3:

		 { if(msgID == P_0_0_InvokeOneWay_MSG){
		stateCurrent = 5;
		System.out.println("Change Current State into " + stateCurrent);
		break;
		}else
		{
		return stateCurrent;
		}
		}

		case 5:

		 { if(msgID == P_0_1_Receive_MSG){
		stateCurrent = 12;
		System.out.println("Change Current State into " + stateCurrent);
		break;
		}else
		{
		return stateCurrent;
		}
		}

		default:
		{
		return stateCurrent;
		}
		}
		return E_Normal;
		}
}
