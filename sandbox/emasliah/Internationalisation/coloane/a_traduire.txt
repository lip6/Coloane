~~~~~~~~~~~~~~~~~~~~~~~~~~~ coloane ~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~ communications ~~~~~~~~~~~~~~~~~~
~~~~~~~~~./Com.java~~~~~~~~~
Demande d'authentification : ./Com.java:91: System.out.println("Demande d'authentification : ");
Retour authentification OK ./Com.java:100: System.out.println("Retour authentification OK");
Retour authentification KO ./Com.java:102: System.err.println("Retour authentification KO");
Demande de connexion du modele ./Com.java:122: System.out.println("Demande de connexion du modele");
Nom de la session : ./Com.java:126: System.out.println("Nom de la session : "+sessionName);
Nom du formalisme : ./Com.java:130: System.out.println("Nom du formalisme : "+formalismName);
Echec de la connexion ! ./Com.java:138: System.err.println("Echec de la connexion !");
Demande de deconnexion du modele ./Com.java:155: System.out.println("Demande de deconnexion du modele");
Deconnexion reussie ! ./Com.java:176: System.out.println("Deconnexion reussie !");
Echec de la deconnexion ! ./Com.java:179: System.err.println("Echec de la deconnexion !");
Demande de deconnexion de tout les modeles ./Com.java:192: System.out.println("Demande de deconnexion de tout les modeles");
Impossible de construire le menu ./Com.java:241: System.err.println("Impossible de construire le menu");
La transmission des reponses de la boite de dialogue a echouee ./Com.java:286: System.err.println("La transmission des reponses de la boite de dialogue a echouee");
~~~~~~~~~./objects/FramekitMessage.java~~~~~~~~~
Le type n'est pas correct ./objects/FramekitMessage.java:64: throw new WrongArgumentValueException("Le type n'est pas correct (valeur 1, 2, 3, 4, 5 ou 6)");
Le type special n'est pas correct ./objects/FramekitMessage.java:66: throw new WrongArgumentValueException("Le type special n'est pas correct (valeur 1, 2, 3 ou 4)");
~~~~~~~~~~~~~~~~~~ communications ~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~ model ~~~~~~~~~~~~~~~~~~
~~~~~~~~~./Model.java~~~~~~~~~
Noeud source ou cible manquant ./Model.java:96: throw new SyntaxErrorException("Noeud source ou cible manquant");
Element referent introuvable ./Model.java:143: throw new SyntaxErrorException("Element referent introuvable");
Construction d'un attribut multiligne incorrecte ./Model.java:224: throw new SyntaxErrorException("Construction d'un attribut multiligne incorrecte");
La position est attachee a un element introuvable ou incorrect ./Model.java:259: throw new SyntaxErrorException("La position est attachee a un element introuvable ou incorrect");
Impossible d'attachee la position de texte a un attribut ./Model.java:306: throw new SyntaxErrorException("Impossible d'attachee la position de texte a un attribut");
~~~~~~~~~~~~~~~~~~ model ~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~ motor ~~~~~~~~~~~~~~~~~~
~~~~~~~~~./formalism/AttributeFormalism.java~~~~~~~~~
Attribut: ./formalism/AttributeFormalism.java:138: String str = "Attribut:n Name : " + name + "n Multilignes : " + isMultiLines;
Name : ./formalism/AttributeFormalism.java:138: String str = "Attribut:n Name : " + name + "n Multilignes : " + isMultiLines;
Multilignes : ./formalism/AttributeFormalism.java:138: String str = "Attribut:n Name : " + name + "n Multilignes : " + isMultiLines;
Valeur par defaut : ./formalism/AttributeFormalism.java:140: str.concat("n Valeur par defaut : " + defaultValue);
~~~~~~~~~./formalism/FormalismManager.java~~~~~~~~~
declaration ./formalism/FormalismManager.java:99: attr = new AttributeFormalism(1,"declaration", IAttributeGraphicInfo.NOR, true, true);
author ./formalism/FormalismManager.java:101: attr = new AttributeFormalism(2,"author(s)", IAttributeGraphicInfo.NOR, true, true);
author ./formalism/FormalismManager.java:373: attr = new AttributeFormalism(2,"author(s)", IAttributeGraphicInfo.NOR, true, true);
version ./formalism/FormalismManager.java:103: attr = new AttributeFormalism(3,"version", IAttributeGraphicInfo.NOR, true, false, "0,0");
version ./formalism/FormalismManager.java:375: attr = new AttributeFormalism(3,"version", IAttributeGraphicInfo.NOR, true, false, "0.0");
project ./formalism/FormalismManager.java:105: attr = new AttributeFormalism(4,"project", IAttributeGraphicInfo.NOR, true, true);
project ./formalism/FormalismManager.java:381: attr = new AttributeFormalism(6,"project", IAttributeGraphicInfo.NOR, true, false);
title ./formalism/FormalismManager.java:107: attr = new AttributeFormalism(5,"title", IAttributeGraphicInfo.NOR, true, true);
title ./formalism/FormalismManager.java:371: attr = new AttributeFormalism(1,"title", IAttributeGraphicInfo.NOR, true, true);
date ./formalism/FormalismManager.java:109: attr = new AttributeFormalism(6,"date", IAttributeGraphicInfo.NOR, true, false);
code ./formalism/FormalismManager.java:111: attr = new AttributeFormalism(7,"code", IAttributeGraphicInfo.NOR, true, true);
note ./formalism/FormalismManager.java:113: attr = new AttributeFormalism(8,"note", false, true);
note ./formalism/FormalismManager.java:129: attr = new AttributeFormalism(5,"note", false, true);
note ./formalism/FormalismManager.java:148: attr = new AttributeFormalism(6,"note", false, true);
note ./formalism/FormalismManager.java:165: attr = new AttributeFormalism(5,"note", false, true);
note ./formalism/FormalismManager.java:180: attr = new AttributeFormalism(4,"note", false, true);
note ./formalism/FormalismManager.java:191: attr = new AttributeFormalism(2,"note", false, true);
note ./formalism/FormalismManager.java:202: attr = new AttributeFormalism(2,"note", false, true);
place ./formalism/FormalismManager.java:120: elem = new NodeFormalism("place", "Place", INodeGraphicInfo.FIG_CIRCLE, 16, 16, false);
place ./formalism/FormalismManager.java:132: elem.setAddrIcone16("/icons/place16.png");
place ./formalism/FormalismManager.java:133: elem.setAddrIcone24("/icons/place24.png");
place ./formalism/FormalismManager.java:211: rule = new Rule("place - place","Une place ne peut etre reliee qu'a une transition.");
place ./formalism/FormalismManager.java:212: rule.forbidenRule(petri, "place", "place");
place ./formalism/FormalismManager.java:221: rule = new Rule("transition - transition","Une transition ne peut etre reliee qu'a une place ou une queue.");
place ./formalism/FormalismManager.java:226: rule = new Rule("transition immediate - transition immediate","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
place ./formalism/FormalismManager.java:231: rule = new Rule("transition - transition immediate","Une transition ne peut etre reliee qu'a une place ou une queue.");
place ./formalism/FormalismManager.java:236: rule = new Rule("transition immediate - transition","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
place ./formalism/FormalismManager.java:241: rule = new Rule("queue - place","Une queue ne peut etre reliee qu'a une transition ou une transition immediate.");
place ./formalism/FormalismManager.java:242: rule.forbidenRule(petri, "queue", "place");
place ./formalism/FormalismManager.java:246: rule = new Rule("place - queue","Une place ne peut etre reliee qu'a une transition ou une transition immediate.");
place ./formalism/FormalismManager.java:247: rule.forbidenRule(petri, "place", "queue");
place ./formalism/FormalismManager.java:285: elem.setAddrIcone16("../icons/place16.gif");
place ./formalism/FormalismManager.java:286: elem.setAddrIcone24("icons/place24.gif");
place ./formalism/FormalismManager.java:428: elem.setAddrIcone16("/icons/place16.png");
place ./formalism/FormalismManager.java:429: elem.setAddrIcone24("/icons/place24.png");
Place ./formalism/FormalismManager.java:120: elem = new NodeFormalism("place", "Place", INodeGraphicInfo.FIG_CIRCLE, 16, 16, false);
name ./formalism/FormalismManager.java:121: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:138: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:157: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:174: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:278: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:291: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.NOR, true, false);
name ./formalism/FormalismManager.java:302: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:389: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:404: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:419: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
domain ./formalism/FormalismManager.java:123: attr = new AttributeFormalism(2,"domain", IAttributeGraphicInfo.L2, true, true);
domain ./formalism/FormalismManager.java:176: attr = new AttributeFormalism(2,"domain", IAttributeGraphicInfo.L2, true, true);
marking ./formalism/FormalismManager.java:125: attr = new AttributeFormalism(3,"marking", IAttributeGraphicInfo.NOR, true, true);
marking ./formalism/FormalismManager.java:178: attr = new AttributeFormalism(3,"marking", IAttributeGraphicInfo.NOR, true, true);
marking ./formalism/FormalismManager.java:282: attr = new AttributeFormalism(3,"marking", IAttributeGraphicInfo.NOR, true, true);
component ./formalism/FormalismManager.java:127: attr = new AttributeFormalism(4,"component", false, true);
note ./formalism/FormalismManager.java:113: attr = new AttributeFormalism(8,"note", false, true);
note ./formalism/FormalismManager.java:129: attr = new AttributeFormalism(5,"note", false, true);
note ./formalism/FormalismManager.java:148: attr = new AttributeFormalism(6,"note", false, true);
note ./formalism/FormalismManager.java:165: attr = new AttributeFormalism(5,"note", false, true);
note ./formalism/FormalismManager.java:180: attr = new AttributeFormalism(4,"note", false, true);
note ./formalism/FormalismManager.java:191: attr = new AttributeFormalism(2,"note", false, true);
note ./formalism/FormalismManager.java:202: attr = new AttributeFormalism(2,"note", false, true);
transition ./formalism/FormalismManager.java:137: elem = new NodeFormalism("transition", "Transition", INodeGraphicInfo.FIG_RECT, 24, 8, false);
transition ./formalism/FormalismManager.java:151: elem.setAddrIcone16("/icons/transition16.png");
transition ./formalism/FormalismManager.java:152: elem.setAddrIcone24("/icons/transition24.png");
transition ./formalism/FormalismManager.java:156: elem = new NodeFormalism("immediate transition", "I. Transition", INodeGraphicInfo.FIG_RECT, 24, 8, true);
transition ./formalism/FormalismManager.java:168: elem.setAddrIcone16("/icons/transitionimmediate16.png");
transition ./formalism/FormalismManager.java:169: elem.setAddrIcone24("/icons/transitionimmediate24.png");
transition ./formalism/FormalismManager.java:211: rule = new Rule("place - place","Une place ne peut etre reliee qu'a une transition.");
transition ./formalism/FormalismManager.java:216: rule = new Rule("queue - queue","Une queue ne peut etre reliee qu'a une transition.");
transition ./formalism/FormalismManager.java:221: rule = new Rule("transition - transition","Une transition ne peut etre reliee qu'a une place ou une queue.");
transition ./formalism/FormalismManager.java:222: rule.forbidenRule(petri, "transition", "transition");
transition ./formalism/FormalismManager.java:226: rule = new Rule("transition immediate - transition immediate","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
transition ./formalism/FormalismManager.java:227: rule.forbidenRule(petri, "immediate transition", "immediate transition");
transition ./formalism/FormalismManager.java:231: rule = new Rule("transition - transition immediate","Une transition ne peut etre reliee qu'a une place ou une queue.");
transition ./formalism/FormalismManager.java:232: rule.forbidenRule(petri, "transition", "immediate transition");
transition ./formalism/FormalismManager.java:236: rule = new Rule("transition immediate - transition","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
transition ./formalism/FormalismManager.java:237: rule.forbidenRule(petri, "immediate transition", "transition");
transition ./formalism/FormalismManager.java:241: rule = new Rule("queue - place","Une queue ne peut etre reliee qu'a une transition ou une transition immediate.");
transition ./formalism/FormalismManager.java:246: rule = new Rule("place - queue","Une place ne peut etre reliee qu'a une transition ou une transition immediate.");
transition ./formalism/FormalismManager.java:296: elem.setAddrIcone16("icons/transition16.gif");
transition ./formalism/FormalismManager.java:297: elem.setAddrIcone24("icons/transition24.gif");
transition ./formalism/FormalismManager.java:311: elem.setAddrIcone16("icons/transitionimmediate16.gif");
transition ./formalism/FormalismManager.java:312: elem.setAddrIcone24("icons/transitionimmediate24.gif");
Transition ./formalism/FormalismManager.java:137: elem = new NodeFormalism("transition", "Transition", INodeGraphicInfo.FIG_RECT, 24, 8, false);
Transition ./formalism/FormalismManager.java:156: elem = new NodeFormalism("immediate transition", "I. Transition", INodeGraphicInfo.FIG_RECT, 24, 8, true);
name ./formalism/FormalismManager.java:121: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:138: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:157: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:174: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:278: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:291: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.NOR, true, false);
name ./formalism/FormalismManager.java:302: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:389: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:404: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:419: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
guard ./formalism/FormalismManager.java:140: attr = new AttributeFormalism(2,"guard",IAttributeGraphicInfo.NOR, true, true,"true");
guard ./formalism/FormalismManager.java:159: attr = new AttributeFormalism(2,"guard", IAttributeGraphicInfo.NOR, true, true);
priority ./formalism/FormalismManager.java:142: attr = new AttributeFormalism(3,"priority", IAttributeGraphicInfo.NOR, true, true, "0");
priority ./formalism/FormalismManager.java:161: attr = new AttributeFormalism(3,"priority", IAttributeGraphicInfo.NOR, true, true, "1");
delay ./formalism/FormalismManager.java:144: attr = new AttributeFormalism(4,"delay", IAttributeGraphicInfo.NOR, true, true);
action ./formalism/FormalismManager.java:146: attr = new AttributeFormalism(5,"action", false, true);
note ./formalism/FormalismManager.java:113: attr = new AttributeFormalism(8,"note", false, true);
note ./formalism/FormalismManager.java:129: attr = new AttributeFormalism(5,"note", false, true);
note ./formalism/FormalismManager.java:148: attr = new AttributeFormalism(6,"note", false, true);
note ./formalism/FormalismManager.java:165: attr = new AttributeFormalism(5,"note", false, true);
note ./formalism/FormalismManager.java:180: attr = new AttributeFormalism(4,"note", false, true);
note ./formalism/FormalismManager.java:191: attr = new AttributeFormalism(2,"note", false, true);
note ./formalism/FormalismManager.java:202: attr = new AttributeFormalism(2,"note", false, true);
immediate transition ./formalism/FormalismManager.java:156: elem = new NodeFormalism("immediate transition", "I. Transition", INodeGraphicInfo.FIG_RECT, 24, 8, true);
immediate transition ./formalism/FormalismManager.java:227: rule.forbidenRule(petri, "immediate transition", "immediate transition");
immediate transition ./formalism/FormalismManager.java:232: rule.forbidenRule(petri, "transition", "immediate transition");
immediate transition ./formalism/FormalismManager.java:237: rule.forbidenRule(petri, "immediate transition", "transition");
I. Transition ./formalism/FormalismManager.java:156: elem = new NodeFormalism("immediate transition", "I. Transition", INodeGraphicInfo.FIG_RECT, 24, 8, true);
name ./formalism/FormalismManager.java:121: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:138: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:157: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:174: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:278: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:291: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.NOR, true, false);
name ./formalism/FormalismManager.java:302: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:389: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:404: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:419: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
guard ./formalism/FormalismManager.java:140: attr = new AttributeFormalism(2,"guard",IAttributeGraphicInfo.NOR, true, true,"true");
guard ./formalism/FormalismManager.java:159: attr = new AttributeFormalism(2,"guard", IAttributeGraphicInfo.NOR, true, true);
priority ./formalism/FormalismManager.java:142: attr = new AttributeFormalism(3,"priority", IAttributeGraphicInfo.NOR, true, true, "0");
priority ./formalism/FormalismManager.java:161: attr = new AttributeFormalism(3,"priority", IAttributeGraphicInfo.NOR, true, true, "1");
weight ./formalism/FormalismManager.java:163: attr = new AttributeFormalism(4,"weight", IAttributeGraphicInfo.NOR, true, true);
note ./formalism/FormalismManager.java:113: attr = new AttributeFormalism(8,"note", false, true);
note ./formalism/FormalismManager.java:129: attr = new AttributeFormalism(5,"note", false, true);
note ./formalism/FormalismManager.java:148: attr = new AttributeFormalism(6,"note", false, true);
note ./formalism/FormalismManager.java:165: attr = new AttributeFormalism(5,"note", false, true);
note ./formalism/FormalismManager.java:180: attr = new AttributeFormalism(4,"note", false, true);
note ./formalism/FormalismManager.java:191: attr = new AttributeFormalism(2,"note", false, true);
note ./formalism/FormalismManager.java:202: attr = new AttributeFormalism(2,"note", false, true);
queue ./formalism/FormalismManager.java:173: elem = new NodeFormalism("queue", "Queue", INodeGraphicInfo.FIG_QUEUE, 16, 8, true);
queue ./formalism/FormalismManager.java:183: elem.setAddrIcone16("/icons/queue16.png");
queue ./formalism/FormalismManager.java:184: elem.setAddrIcone24("/icons/queue24.png");
queue ./formalism/FormalismManager.java:216: rule = new Rule("queue - queue","Une queue ne peut etre reliee qu'a une transition.");
queue ./formalism/FormalismManager.java:217: rule.forbidenRule(petri, "queue", "queue");
queue ./formalism/FormalismManager.java:221: rule = new Rule("transition - transition","Une transition ne peut etre reliee qu'a une place ou une queue.");
queue ./formalism/FormalismManager.java:226: rule = new Rule("transition immediate - transition immediate","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
queue ./formalism/FormalismManager.java:231: rule = new Rule("transition - transition immediate","Une transition ne peut etre reliee qu'a une place ou une queue.");
queue ./formalism/FormalismManager.java:236: rule = new Rule("transition immediate - transition","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
queue ./formalism/FormalismManager.java:241: rule = new Rule("queue - place","Une queue ne peut etre reliee qu'a une transition ou une transition immediate.");
queue ./formalism/FormalismManager.java:242: rule.forbidenRule(petri, "queue", "place");
queue ./formalism/FormalismManager.java:246: rule = new Rule("place - queue","Une place ne peut etre reliee qu'a une transition ou une transition immediate.");
queue ./formalism/FormalismManager.java:247: rule.forbidenRule(petri, "place", "queue");
Queue ./formalism/FormalismManager.java:173: elem = new NodeFormalism("queue", "Queue", INodeGraphicInfo.FIG_QUEUE, 16, 8, true);
name ./formalism/FormalismManager.java:121: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:138: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:157: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:174: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:278: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:291: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.NOR, true, false);
name ./formalism/FormalismManager.java:302: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:389: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:404: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:419: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
domain ./formalism/FormalismManager.java:123: attr = new AttributeFormalism(2,"domain", IAttributeGraphicInfo.L2, true, true);
domain ./formalism/FormalismManager.java:176: attr = new AttributeFormalism(2,"domain", IAttributeGraphicInfo.L2, true, true);
marking ./formalism/FormalismManager.java:125: attr = new AttributeFormalism(3,"marking", IAttributeGraphicInfo.NOR, true, true);
marking ./formalism/FormalismManager.java:178: attr = new AttributeFormalism(3,"marking", IAttributeGraphicInfo.NOR, true, true);
marking ./formalism/FormalismManager.java:282: attr = new AttributeFormalism(3,"marking", IAttributeGraphicInfo.NOR, true, true);
note ./formalism/FormalismManager.java:113: attr = new AttributeFormalism(8,"note", false, true);
note ./formalism/FormalismManager.java:129: attr = new AttributeFormalism(5,"note", false, true);
note ./formalism/FormalismManager.java:148: attr = new AttributeFormalism(6,"note", false, true);
note ./formalism/FormalismManager.java:165: attr = new AttributeFormalism(5,"note", false, true);
note ./formalism/FormalismManager.java:180: attr = new AttributeFormalism(4,"note", false, true);
note ./formalism/FormalismManager.java:191: attr = new AttributeFormalism(2,"note", false, true);
note ./formalism/FormalismManager.java:202: attr = new AttributeFormalism(2,"note", false, true);
arc ./formalism/FormalismManager.java:188: elem = new ArcFormalism("arc", "Arc", IArcGraphicInfo.FIG_ARC_SIMPLE, 8, 8, false);
arc ./formalism/FormalismManager.java:194: elem.setAddrIcone16("/icons/arc16.png");
arc ./formalism/FormalismManager.java:195: elem.setAddrIcone24("/icons/arc24.png");
arc ./formalism/FormalismManager.java:199: elem = new ArcFormalism("inhibitor arc", "Inhibitor Arc", IArcGraphicInfo.FIG_ARC_INHIBITOR, 8, 8, false);
arc ./formalism/FormalismManager.java:205: elem.setAddrIcone16("/icons/arcinhibiteur16.png");
arc ./formalism/FormalismManager.java:206: elem.setAddrIcone24("/icons/arcinhibiteur24.png");
arc ./formalism/FormalismManager.java:316: elem = new ArcFormalism("arc", "Arc", IArcGraphicInfo.FIG_ARC_SIMPLE, 8, 8, false);
arc ./formalism/FormalismManager.java:318: elem.setAddrIcone16("icons/arc16.gif");
arc ./formalism/FormalismManager.java:319: elem.setAddrIcone24("icons/arc24.gif");
arc ./formalism/FormalismManager.java:439: elem.setAddrIcone16("/icons/arc16.png");
arc ./formalism/FormalismManager.java:440: elem.setAddrIcone24("/icons/arc24.png");
Arc ./formalism/FormalismManager.java:188: elem = new ArcFormalism("arc", "Arc", IArcGraphicInfo.FIG_ARC_SIMPLE, 8, 8, false);
Arc ./formalism/FormalismManager.java:199: elem = new ArcFormalism("inhibitor arc", "Inhibitor Arc", IArcGraphicInfo.FIG_ARC_INHIBITOR, 8, 8, false);
Arc ./formalism/FormalismManager.java:316: elem = new ArcFormalism("arc", "Arc", IArcGraphicInfo.FIG_ARC_SIMPLE, 8, 8, false);
valuation ./formalism/FormalismManager.java:189: attr = new AttributeFormalism(1,"valuation", IAttributeGraphicInfo.NOR, true, true, "1");
valuation ./formalism/FormalismManager.java:200: attr = new AttributeFormalism(1,"valuation", IAttributeGraphicInfo.NOR, true, true, "1");
note ./formalism/FormalismManager.java:113: attr = new AttributeFormalism(8,"note", false, true);
note ./formalism/FormalismManager.java:129: attr = new AttributeFormalism(5,"note", false, true);
note ./formalism/FormalismManager.java:148: attr = new AttributeFormalism(6,"note", false, true);
note ./formalism/FormalismManager.java:165: attr = new AttributeFormalism(5,"note", false, true);
note ./formalism/FormalismManager.java:180: attr = new AttributeFormalism(4,"note", false, true);
note ./formalism/FormalismManager.java:191: attr = new AttributeFormalism(2,"note", false, true);
note ./formalism/FormalismManager.java:202: attr = new AttributeFormalism(2,"note", false, true);
inhibitor arc ./formalism/FormalismManager.java:199: elem = new ArcFormalism("inhibitor arc", "Inhibitor Arc", IArcGraphicInfo.FIG_ARC_INHIBITOR, 8, 8, false);
Inhibitor Arc ./formalism/FormalismManager.java:199: elem = new ArcFormalism("inhibitor arc", "Inhibitor Arc", IArcGraphicInfo.FIG_ARC_INHIBITOR, 8, 8, false);
valuation ./formalism/FormalismManager.java:189: attr = new AttributeFormalism(1,"valuation", IAttributeGraphicInfo.NOR, true, true, "1");
valuation ./formalism/FormalismManager.java:200: attr = new AttributeFormalism(1,"valuation", IAttributeGraphicInfo.NOR, true, true, "1");
note ./formalism/FormalismManager.java:113: attr = new AttributeFormalism(8,"note", false, true);
note ./formalism/FormalismManager.java:129: attr = new AttributeFormalism(5,"note", false, true);
note ./formalism/FormalismManager.java:148: attr = new AttributeFormalism(6,"note", false, true);
note ./formalism/FormalismManager.java:165: attr = new AttributeFormalism(5,"note", false, true);
note ./formalism/FormalismManager.java:180: attr = new AttributeFormalism(4,"note", false, true);
note ./formalism/FormalismManager.java:191: attr = new AttributeFormalism(2,"note", false, true);
note ./formalism/FormalismManager.java:202: attr = new AttributeFormalism(2,"note", false, true);
place - place ./formalism/FormalismManager.java:211: rule = new Rule("place - place","Une place ne peut etre reliee qu'a une transition.");
Une place ne peut etre reliee qu'a une transition. ./formalism/FormalismManager.java:211: rule = new Rule("place - place","Une place ne peut etre reliee qu'a une transition.");
Une place ne peut etre reliee qu'a une transition ./formalism/FormalismManager.java:246: rule = new Rule("place - queue","Une place ne peut etre reliee qu'a une transition ou une transition immediate.");
place ./formalism/FormalismManager.java:120: elem = new NodeFormalism("place", "Place", INodeGraphicInfo.FIG_CIRCLE, 16, 16, false);
place ./formalism/FormalismManager.java:132: elem.setAddrIcone16("/icons/place16.png");
place ./formalism/FormalismManager.java:133: elem.setAddrIcone24("/icons/place24.png");
place ./formalism/FormalismManager.java:211: rule = new Rule("place - place","Une place ne peut etre reliee qu'a une transition.");
place ./formalism/FormalismManager.java:212: rule.forbidenRule(petri, "place", "place");
place ./formalism/FormalismManager.java:221: rule = new Rule("transition - transition","Une transition ne peut etre reliee qu'a une place ou une queue.");
place ./formalism/FormalismManager.java:226: rule = new Rule("transition immediate - transition immediate","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
place ./formalism/FormalismManager.java:231: rule = new Rule("transition - transition immediate","Une transition ne peut etre reliee qu'a une place ou une queue.");
place ./formalism/FormalismManager.java:236: rule = new Rule("transition immediate - transition","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
place ./formalism/FormalismManager.java:241: rule = new Rule("queue - place","Une queue ne peut etre reliee qu'a une transition ou une transition immediate.");
place ./formalism/FormalismManager.java:242: rule.forbidenRule(petri, "queue", "place");
place ./formalism/FormalismManager.java:246: rule = new Rule("place - queue","Une place ne peut etre reliee qu'a une transition ou une transition immediate.");
place ./formalism/FormalismManager.java:247: rule.forbidenRule(petri, "place", "queue");
place ./formalism/FormalismManager.java:285: elem.setAddrIcone16("../icons/place16.gif");
place ./formalism/FormalismManager.java:286: elem.setAddrIcone24("icons/place24.gif");
place ./formalism/FormalismManager.java:428: elem.setAddrIcone16("/icons/place16.png");
place ./formalism/FormalismManager.java:429: elem.setAddrIcone24("/icons/place24.png");
queue - queue ./formalism/FormalismManager.java:216: rule = new Rule("queue - queue","Une queue ne peut etre reliee qu'a une transition.");
Une queue ne peut etre reliee qu'a une transition. ./formalism/FormalismManager.java:216: rule = new Rule("queue - queue","Une queue ne peut etre reliee qu'a une transition.");
Une queue ne peut etre reliee qu'a une transition ./formalism/FormalismManager.java:241: rule = new Rule("queue - place","Une queue ne peut etre reliee qu'a une transition ou une transition immediate.");
queue ./formalism/FormalismManager.java:173: elem = new NodeFormalism("queue", "Queue", INodeGraphicInfo.FIG_QUEUE, 16, 8, true);
queue ./formalism/FormalismManager.java:183: elem.setAddrIcone16("/icons/queue16.png");
queue ./formalism/FormalismManager.java:184: elem.setAddrIcone24("/icons/queue24.png");
queue ./formalism/FormalismManager.java:216: rule = new Rule("queue - queue","Une queue ne peut etre reliee qu'a une transition.");
queue ./formalism/FormalismManager.java:217: rule.forbidenRule(petri, "queue", "queue");
queue ./formalism/FormalismManager.java:221: rule = new Rule("transition - transition","Une transition ne peut etre reliee qu'a une place ou une queue.");
queue ./formalism/FormalismManager.java:226: rule = new Rule("transition immediate - transition immediate","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
queue ./formalism/FormalismManager.java:231: rule = new Rule("transition - transition immediate","Une transition ne peut etre reliee qu'a une place ou une queue.");
queue ./formalism/FormalismManager.java:236: rule = new Rule("transition immediate - transition","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
queue ./formalism/FormalismManager.java:241: rule = new Rule("queue - place","Une queue ne peut etre reliee qu'a une transition ou une transition immediate.");
queue ./formalism/FormalismManager.java:242: rule.forbidenRule(petri, "queue", "place");
queue ./formalism/FormalismManager.java:246: rule = new Rule("place - queue","Une place ne peut etre reliee qu'a une transition ou une transition immediate.");
queue ./formalism/FormalismManager.java:247: rule.forbidenRule(petri, "place", "queue");
transition - transition ./formalism/FormalismManager.java:221: rule = new Rule("transition - transition","Une transition ne peut etre reliee qu'a une place ou une queue.");
transition - transition ./formalism/FormalismManager.java:231: rule = new Rule("transition - transition immediate","Une transition ne peut etre reliee qu'a une place ou une queue.");
Une transition ne peut etre reliee qu'a une place ou une queue. ./formalism/FormalismManager.java:221: rule = new Rule("transition - transition","Une transition ne peut etre reliee qu'a une place ou une queue.");
Une transition ne peut etre reliee qu'a une place ou une queue ./formalism/FormalismManager.java:231: rule = new Rule("transition - transition immediate","Une transition ne peut etre reliee qu'a une place ou une queue.");
transition ./formalism/FormalismManager.java:137: elem = new NodeFormalism("transition", "Transition", INodeGraphicInfo.FIG_RECT, 24, 8, false);
transition ./formalism/FormalismManager.java:151: elem.setAddrIcone16("/icons/transition16.png");
transition ./formalism/FormalismManager.java:152: elem.setAddrIcone24("/icons/transition24.png");
transition ./formalism/FormalismManager.java:156: elem = new NodeFormalism("immediate transition", "I. Transition", INodeGraphicInfo.FIG_RECT, 24, 8, true);
transition ./formalism/FormalismManager.java:168: elem.setAddrIcone16("/icons/transitionimmediate16.png");
transition ./formalism/FormalismManager.java:169: elem.setAddrIcone24("/icons/transitionimmediate24.png");
transition ./formalism/FormalismManager.java:211: rule = new Rule("place - place","Une place ne peut etre reliee qu'a une transition.");
transition ./formalism/FormalismManager.java:216: rule = new Rule("queue - queue","Une queue ne peut etre reliee qu'a une transition.");
transition ./formalism/FormalismManager.java:221: rule = new Rule("transition - transition","Une transition ne peut etre reliee qu'a une place ou une queue.");
transition ./formalism/FormalismManager.java:222: rule.forbidenRule(petri, "transition", "transition");
transition ./formalism/FormalismManager.java:226: rule = new Rule("transition immediate - transition immediate","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
transition ./formalism/FormalismManager.java:227: rule.forbidenRule(petri, "immediate transition", "immediate transition");
transition ./formalism/FormalismManager.java:231: rule = new Rule("transition - transition immediate","Une transition ne peut etre reliee qu'a une place ou une queue.");
transition ./formalism/FormalismManager.java:232: rule.forbidenRule(petri, "transition", "immediate transition");
transition ./formalism/FormalismManager.java:236: rule = new Rule("transition immediate - transition","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
transition ./formalism/FormalismManager.java:237: rule.forbidenRule(petri, "immediate transition", "transition");
transition ./formalism/FormalismManager.java:241: rule = new Rule("queue - place","Une queue ne peut etre reliee qu'a une transition ou une transition immediate.");
transition ./formalism/FormalismManager.java:246: rule = new Rule("place - queue","Une place ne peut etre reliee qu'a une transition ou une transition immediate.");
transition ./formalism/FormalismManager.java:296: elem.setAddrIcone16("icons/transition16.gif");
transition ./formalism/FormalismManager.java:297: elem.setAddrIcone24("icons/transition24.gif");
transition ./formalism/FormalismManager.java:311: elem.setAddrIcone16("icons/transitionimmediate16.gif");
transition ./formalism/FormalismManager.java:312: elem.setAddrIcone24("icons/transitionimmediate24.gif");
transition immediate - transition immediate ./formalism/FormalismManager.java:226: rule = new Rule("transition immediate - transition immediate","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
Une transition immediate ne peut etre reliee qu'a une place ou une queue. ./formalism/FormalismManager.java:226: rule = new Rule("transition immediate - transition immediate","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
Une transition immediate ne peut etre reliee qu'a une place ou une queue ./formalism/FormalismManager.java:236: rule = new Rule("transition immediate - transition","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
immediate transition ./formalism/FormalismManager.java:156: elem = new NodeFormalism("immediate transition", "I. Transition", INodeGraphicInfo.FIG_RECT, 24, 8, true);
immediate transition ./formalism/FormalismManager.java:227: rule.forbidenRule(petri, "immediate transition", "immediate transition");
immediate transition ./formalism/FormalismManager.java:232: rule.forbidenRule(petri, "transition", "immediate transition");
immediate transition ./formalism/FormalismManager.java:237: rule.forbidenRule(petri, "immediate transition", "transition");
transition - transition immediate ./formalism/FormalismManager.java:231: rule = new Rule("transition - transition immediate","Une transition ne peut etre reliee qu'a une place ou une queue.");
Une transition ne peut etre reliee qu'a une place ou une queue. ./formalism/FormalismManager.java:221: rule = new Rule("transition - transition","Une transition ne peut etre reliee qu'a une place ou une queue.");
Une transition ne peut etre reliee qu'a une place ou une queue ./formalism/FormalismManager.java:231: rule = new Rule("transition - transition immediate","Une transition ne peut etre reliee qu'a une place ou une queue.");
transition immediate - transition ./formalism/FormalismManager.java:226: rule = new Rule("transition immediate - transition immediate","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
transition immediate - transition ./formalism/FormalismManager.java:236: rule = new Rule("transition immediate - transition","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
Une transition immediate ne peut etre reliee qu'a une place ou une queue. ./formalism/FormalismManager.java:226: rule = new Rule("transition immediate - transition immediate","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
Une transition immediate ne peut etre reliee qu'a une place ou une queue ./formalism/FormalismManager.java:236: rule = new Rule("transition immediate - transition","Une transition immediate ne peut etre reliee qu'a une place ou une queue.");
queue - place ./formalism/FormalismManager.java:241: rule = new Rule("queue - place","Une queue ne peut etre reliee qu'a une transition ou une transition immediate.");
Une queue ne peut etre reliee qu'a une transition ou une transition immediate." place - queue ./formalism/FormalismManager.java:246: rule = new Rule("place - queue","Une place ne peut etre reliee qu'a une transition ou une transition immediate.");
Une place ne peut etre reliee qu'a une transition ou une transition immediate. ./formalism/FormalismManager.java:246: rule = new Rule("place - queue","Une place ne peut etre reliee qu'a une transition ou une transition immediate.");
Branching-Process ./formalism/FormalismManager.java:263: Formalism prefix = new Formalism("Branching-Process", "/icons/prefix.gif");
tool ./formalism/FormalismManager.java:267: attr = new AttributeFormalism(1,"tool", IAttributeGraphicInfo.NOR, true, true);
origin ./formalism/FormalismManager.java:270: attr = new AttributeFormalism(2,"origin", IAttributeGraphicInfo.NOR, true, true);
condition ./formalism/FormalismManager.java:277: elem = new NodeFormalism("condition", "Condition", INodeGraphicInfo.FIG_CIRCLE, 16, 16, false);
condition ./formalism/FormalismManager.java:327: rule = new Rule("condition - condition", "Une condition ne peut etre reliee qu'a un event ou un cutoff.");
condition ./formalism/FormalismManager.java:328: rule.forbidenRule(prefix, "condition", "condition");
condition ./formalism/FormalismManager.java:332: rule = new Rule("event - event", "Un event ne peut etre relie qu'a une condition.");
condition ./formalism/FormalismManager.java:337: rule = new Rule("cutoff - event", "Un cutoff ne peut etre relie qu'a une condition.");
condition ./formalism/FormalismManager.java:342: rule = new Rule("event - cutoff", "Un cutoff ou un event ne peut etre relie qu'a une condition.");
condition ./formalism/FormalismManager.java:347: rule = new Rule("cutoff - cutoff", "Un cutoff ne peut etre relie qu'a une condition.");
Condition ./formalism/FormalismManager.java:277: elem = new NodeFormalism("condition", "Condition", INodeGraphicInfo.FIG_CIRCLE, 16, 16, false);
name ./formalism/FormalismManager.java:121: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:138: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:157: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:174: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:278: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:291: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.NOR, true, false);
name ./formalism/FormalismManager.java:302: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:389: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:404: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:419: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
label ./formalism/FormalismManager.java:280: attr = new AttributeFormalism(2,"label", IAttributeGraphicInfo.L2, true, true);
label ./formalism/FormalismManager.java:293: attr = new AttributeFormalism(2,"label", IAttributeGraphicInfo.NOR, true, true, "true");
label ./formalism/FormalismManager.java:304: attr = new AttributeFormalism(2,"label", IAttributeGraphicInfo.L2, true, true, "true");
label ./formalism/FormalismManager.java:434: attr = new AttributeFormalism(1,"label", IAttributeGraphicInfo.NOR, true, false);
marking ./formalism/FormalismManager.java:125: attr = new AttributeFormalism(3,"marking", IAttributeGraphicInfo.NOR, true, true);
marking ./formalism/FormalismManager.java:178: attr = new AttributeFormalism(3,"marking", IAttributeGraphicInfo.NOR, true, true);
marking ./formalism/FormalismManager.java:282: attr = new AttributeFormalism(3,"marking", IAttributeGraphicInfo.NOR, true, true);
event ./formalism/FormalismManager.java:290: elem = new NodeFormalism("event", "Event", INodeGraphicInfo.FIG_RECT, 24, 8, false);
event ./formalism/FormalismManager.java:327: rule = new Rule("condition - condition", "Une condition ne peut etre reliee qu'a un event ou un cutoff.");
event ./formalism/FormalismManager.java:332: rule = new Rule("event - event", "Un event ne peut etre relie qu'a une condition.");
event ./formalism/FormalismManager.java:333: rule.forbidenRule(prefix, "event", "event");
event ./formalism/FormalismManager.java:337: rule = new Rule("cutoff - event", "Un cutoff ne peut etre relie qu'a une condition.");
event ./formalism/FormalismManager.java:338: rule.forbidenRule(prefix, "cutoff", "event");
event ./formalism/FormalismManager.java:342: rule = new Rule("event - cutoff", "Un cutoff ou un event ne peut etre relie qu'a une condition.");
event ./formalism/FormalismManager.java:343: rule.forbidenRule(prefix, "event", "cutoff");
event ./formalism/FormalismManager.java:433: elem = new ArcFormalism("event", "Event", IArcGraphicInfo.FIG_ARC_SIMPLE, 8, 8, false);
Event ./formalism/FormalismManager.java:290: elem = new NodeFormalism("event", "Event", INodeGraphicInfo.FIG_RECT, 24, 8, false);
Event ./formalism/FormalismManager.java:433: elem = new ArcFormalism("event", "Event", IArcGraphicInfo.FIG_ARC_SIMPLE, 8, 8, false);
name ./formalism/FormalismManager.java:121: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:138: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:157: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:174: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:278: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:291: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.NOR, true, false);
name ./formalism/FormalismManager.java:302: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:389: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:404: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:419: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
label ./formalism/FormalismManager.java:280: attr = new AttributeFormalism(2,"label", IAttributeGraphicInfo.L2, true, true);
label ./formalism/FormalismManager.java:293: attr = new AttributeFormalism(2,"label", IAttributeGraphicInfo.NOR, true, true, "true");
label ./formalism/FormalismManager.java:304: attr = new AttributeFormalism(2,"label", IAttributeGraphicInfo.L2, true, true, "true");
label ./formalism/FormalismManager.java:434: attr = new AttributeFormalism(1,"label", IAttributeGraphicInfo.NOR, true, false);
cutoff ./formalism/FormalismManager.java:301: elem = new NodeFormalism("cutoff", "Cutoff", INodeGraphicInfo.FIG_RECT, 24, 8, true);
cutoff ./formalism/FormalismManager.java:327: rule = new Rule("condition - condition", "Une condition ne peut etre reliee qu'a un event ou un cutoff.");
cutoff ./formalism/FormalismManager.java:337: rule = new Rule("cutoff - event", "Un cutoff ne peut etre relie qu'a une condition.");
cutoff ./formalism/FormalismManager.java:338: rule.forbidenRule(prefix, "cutoff", "event");
cutoff ./formalism/FormalismManager.java:342: rule = new Rule("event - cutoff", "Un cutoff ou un event ne peut etre relie qu'a une condition.");
cutoff ./formalism/FormalismManager.java:343: rule.forbidenRule(prefix, "event", "cutoff");
cutoff ./formalism/FormalismManager.java:347: rule = new Rule("cutoff - cutoff", "Un cutoff ne peut etre relie qu'a une condition.");
cutoff ./formalism/FormalismManager.java:348: rule.forbidenRule(prefix, "cutoff", "cutoff");
Cutoff ./formalism/FormalismManager.java:301: elem = new NodeFormalism("cutoff", "Cutoff", INodeGraphicInfo.FIG_RECT, 24, 8, true);
name ./formalism/FormalismManager.java:121: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:138: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:157: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:174: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:278: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:291: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.NOR, true, false);
name ./formalism/FormalismManager.java:302: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:389: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:404: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:419: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
label ./formalism/FormalismManager.java:280: attr = new AttributeFormalism(2,"label", IAttributeGraphicInfo.L2, true, true);
label ./formalism/FormalismManager.java:293: attr = new AttributeFormalism(2,"label", IAttributeGraphicInfo.NOR, true, true, "true");
label ./formalism/FormalismManager.java:304: attr = new AttributeFormalism(2,"label", IAttributeGraphicInfo.L2, true, true, "true");
label ./formalism/FormalismManager.java:434: attr = new AttributeFormalism(1,"label", IAttributeGraphicInfo.NOR, true, false);
image ./formalism/FormalismManager.java:306: attr = new AttributeFormalism(3,"image", IAttributeGraphicInfo.NOR, true, true, "1");
image ./formalism/FormalismManager.java:308: attr = new AttributeFormalism(4,"num_image", false, true, "1");
num_image ./formalism/FormalismManager.java:308: attr = new AttributeFormalism(4,"num_image", false, true, "1");
arc ./formalism/FormalismManager.java:188: elem = new ArcFormalism("arc", "Arc", IArcGraphicInfo.FIG_ARC_SIMPLE, 8, 8, false);
arc ./formalism/FormalismManager.java:194: elem.setAddrIcone16("/icons/arc16.png");
arc ./formalism/FormalismManager.java:195: elem.setAddrIcone24("/icons/arc24.png");
arc ./formalism/FormalismManager.java:199: elem = new ArcFormalism("inhibitor arc", "Inhibitor Arc", IArcGraphicInfo.FIG_ARC_INHIBITOR, 8, 8, false);
arc ./formalism/FormalismManager.java:205: elem.setAddrIcone16("/icons/arcinhibiteur16.png");
arc ./formalism/FormalismManager.java:206: elem.setAddrIcone24("/icons/arcinhibiteur24.png");
arc ./formalism/FormalismManager.java:316: elem = new ArcFormalism("arc", "Arc", IArcGraphicInfo.FIG_ARC_SIMPLE, 8, 8, false);
arc ./formalism/FormalismManager.java:318: elem.setAddrIcone16("icons/arc16.gif");
arc ./formalism/FormalismManager.java:319: elem.setAddrIcone24("icons/arc24.gif");
arc ./formalism/FormalismManager.java:439: elem.setAddrIcone16("/icons/arc16.png");
arc ./formalism/FormalismManager.java:440: elem.setAddrIcone24("/icons/arc24.png");
Arc ./formalism/FormalismManager.java:188: elem = new ArcFormalism("arc", "Arc", IArcGraphicInfo.FIG_ARC_SIMPLE, 8, 8, false);
Arc ./formalism/FormalismManager.java:199: elem = new ArcFormalism("inhibitor arc", "Inhibitor Arc", IArcGraphicInfo.FIG_ARC_INHIBITOR, 8, 8, false);
Arc ./formalism/FormalismManager.java:316: elem = new ArcFormalism("arc", "Arc", IArcGraphicInfo.FIG_ARC_SIMPLE, 8, 8, false);
condition - condition ./formalism/FormalismManager.java:327: rule = new Rule("condition - condition", "Une condition ne peut etre reliee qu'a un event ou un cutoff.");
Une condition ne peut etre reliee qu'a un event ou un cutoff. ./formalism/FormalismManager.java:327: rule = new Rule("condition - condition", "Une condition ne peut etre reliee qu'a un event ou un cutoff.");
event - event ./formalism/FormalismManager.java:332: rule = new Rule("event - event", "Un event ne peut etre relie qu'a une condition.");
Un event ne peut etre relie qu'a une condition. ./formalism/FormalismManager.java:332: rule = new Rule("event - event", "Un event ne peut etre relie qu'a une condition.");
cutoff - event ./formalism/FormalismManager.java:337: rule = new Rule("cutoff - event", "Un cutoff ne peut etre relie qu'a une condition.");
Un cutoff ne peut etre relie qu'a une condition. ./formalism/FormalismManager.java:337: rule = new Rule("cutoff - event", "Un cutoff ne peut etre relie qu'a une condition.");
Un cutoff ne peut etre relie qu'a une condition ./formalism/FormalismManager.java:347: rule = new Rule("cutoff - cutoff", "Un cutoff ne peut etre relie qu'a une condition.");
event - cutoff ./formalism/FormalismManager.java:342: rule = new Rule("event - cutoff", "Un cutoff ou un event ne peut etre relie qu'a une condition.");
Un cutoff ou un event ne peut etre relie qu'a une condition. ./formalism/FormalismManager.java:342: rule = new Rule("event - cutoff", "Un cutoff ou un event ne peut etre relie qu'a une condition.");
cutoff - cutoff ./formalism/FormalismManager.java:347: rule = new Rule("cutoff - cutoff", "Un cutoff ne peut etre relie qu'a une condition.");
Un cutoff ne peut etre relie qu'a une condition. ./formalism/FormalismManager.java:337: rule = new Rule("cutoff - event", "Un cutoff ne peut etre relie qu'a une condition.");
Un cutoff ne peut etre relie qu'a une condition ./formalism/FormalismManager.java:347: rule = new Rule("cutoff - cutoff", "Un cutoff ne peut etre relie qu'a une condition.");
ReachabilityGraph ./formalism/FormalismManager.java:366: Formalism graph = new Formalism("ReachabilityGraph", "/icons/gma.gif");
title ./formalism/FormalismManager.java:107: attr = new AttributeFormalism(5,"title", IAttributeGraphicInfo.NOR, true, true);
title ./formalism/FormalismManager.java:371: attr = new AttributeFormalism(1,"title", IAttributeGraphicInfo.NOR, true, true);
author ./formalism/FormalismManager.java:101: attr = new AttributeFormalism(2,"author(s)", IAttributeGraphicInfo.NOR, true, true);
author ./formalism/FormalismManager.java:373: attr = new AttributeFormalism(2,"author(s)", IAttributeGraphicInfo.NOR, true, true);
version ./formalism/FormalismManager.java:103: attr = new AttributeFormalism(3,"version", IAttributeGraphicInfo.NOR, true, false, "0,0");
version ./formalism/FormalismManager.java:375: attr = new AttributeFormalism(3,"version", IAttributeGraphicInfo.NOR, true, false, "0.0");
information ./formalism/FormalismManager.java:377: attr = new AttributeFormalism(4,"information", IAttributeGraphicInfo.NOR, true, true);
type ./formalism/FormalismManager.java:379: attr = new AttributeFormalism(5,"type", IAttributeGraphicInfo.NOR, true, true);
project ./formalism/FormalismManager.java:105: attr = new AttributeFormalism(4,"project", IAttributeGraphicInfo.NOR, true, true);
project ./formalism/FormalismManager.java:381: attr = new AttributeFormalism(6,"project", IAttributeGraphicInfo.NOR, true, false);
initial_state ./formalism/FormalismManager.java:388: elem = new NodeFormalism("initial_state", "Initial State", INodeGraphicInfo.FIG_DBLCIRCLE, 16, 16, false);
Initial State ./formalism/FormalismManager.java:388: elem = new NodeFormalism("initial_state", "Initial State", INodeGraphicInfo.FIG_DBLCIRCLE, 16, 16, false);
name ./formalism/FormalismManager.java:121: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:138: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:157: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:174: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:278: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:291: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.NOR, true, false);
name ./formalism/FormalismManager.java:302: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:389: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:404: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:419: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
value ./formalism/FormalismManager.java:391: attr = new AttributeFormalism(2,"value", IAttributeGraphicInfo.L2, true, true);
value ./formalism/FormalismManager.java:406: attr = new AttributeFormalism(2,"value", IAttributeGraphicInfo.L2, true, true);
value ./formalism/FormalismManager.java:421: attr = new AttributeFormalism(2,"value", IAttributeGraphicInfo.L2, true, true);
value ./formalism/FormalismManager.java:436: attr = new AttributeFormalism(2,"value", false, true);
initial ./formalism/FormalismManager.java:388: elem = new NodeFormalism("initial_state", "Initial State", INodeGraphicInfo.FIG_DBLCIRCLE, 16, 16, false);
initial ./formalism/FormalismManager.java:393: attr = new AttributeFormalism(3,"initial", IAttributeGraphicInfo.NOR, true, true);
initial ./formalism/FormalismManager.java:398: elem.setAddrIcone16("/icons/initial16.png");
initial ./formalism/FormalismManager.java:399: elem.setAddrIcone24("/icons/initial24.png");
initial ./formalism/FormalismManager.java:408: attr = new AttributeFormalism(3,"initial", IAttributeGraphicInfo.NOR, true, true);
initial ./formalism/FormalismManager.java:423: attr = new AttributeFormalism(3,"initial", IAttributeGraphicInfo.NOR, true, true);
deadlock ./formalism/FormalismManager.java:395: attr = new AttributeFormalism(4,"deadlock", false, true);
deadlock ./formalism/FormalismManager.java:410: attr = new AttributeFormalism(4,"deadlock", false, true);
deadlock ./formalism/FormalismManager.java:425: attr = new AttributeFormalism(4,"deadlock", false, true);
terminal_state ./formalism/FormalismManager.java:403: elem = new NodeFormalism("terminal_state", "Terminal State", INodeGraphicInfo.FIG_CIRCLE, 16, 16, true);
Terminal State ./formalism/FormalismManager.java:403: elem = new NodeFormalism("terminal_state", "Terminal State", INodeGraphicInfo.FIG_CIRCLE, 16, 16, true);
name ./formalism/FormalismManager.java:121: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:138: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:157: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:174: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:278: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:291: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.NOR, true, false);
name ./formalism/FormalismManager.java:302: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:389: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:404: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:419: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
value ./formalism/FormalismManager.java:391: attr = new AttributeFormalism(2,"value", IAttributeGraphicInfo.L2, true, true);
value ./formalism/FormalismManager.java:406: attr = new AttributeFormalism(2,"value", IAttributeGraphicInfo.L2, true, true);
value ./formalism/FormalismManager.java:421: attr = new AttributeFormalism(2,"value", IAttributeGraphicInfo.L2, true, true);
value ./formalism/FormalismManager.java:436: attr = new AttributeFormalism(2,"value", false, true);
initial ./formalism/FormalismManager.java:388: elem = new NodeFormalism("initial_state", "Initial State", INodeGraphicInfo.FIG_DBLCIRCLE, 16, 16, false);
initial ./formalism/FormalismManager.java:393: attr = new AttributeFormalism(3,"initial", IAttributeGraphicInfo.NOR, true, true);
initial ./formalism/FormalismManager.java:398: elem.setAddrIcone16("/icons/initial16.png");
initial ./formalism/FormalismManager.java:399: elem.setAddrIcone24("/icons/initial24.png");
initial ./formalism/FormalismManager.java:408: attr = new AttributeFormalism(3,"initial", IAttributeGraphicInfo.NOR, true, true);
initial ./formalism/FormalismManager.java:423: attr = new AttributeFormalism(3,"initial", IAttributeGraphicInfo.NOR, true, true);
deadlock ./formalism/FormalismManager.java:395: attr = new AttributeFormalism(4,"deadlock", false, true);
deadlock ./formalism/FormalismManager.java:410: attr = new AttributeFormalism(4,"deadlock", false, true);
deadlock ./formalism/FormalismManager.java:425: attr = new AttributeFormalism(4,"deadlock", false, true);
state ./formalism/FormalismManager.java:388: elem = new NodeFormalism("initial_state", "Initial State", INodeGraphicInfo.FIG_DBLCIRCLE, 16, 16, false);
state ./formalism/FormalismManager.java:403: elem = new NodeFormalism("terminal_state", "Terminal State", INodeGraphicInfo.FIG_CIRCLE, 16, 16, true);
state ./formalism/FormalismManager.java:418: elem = new NodeFormalism("state", "State", INodeGraphicInfo.FIG_CIRCLE, 16, 16, false);
State ./formalism/FormalismManager.java:388: elem = new NodeFormalism("initial_state", "Initial State", INodeGraphicInfo.FIG_DBLCIRCLE, 16, 16, false);
State ./formalism/FormalismManager.java:403: elem = new NodeFormalism("terminal_state", "Terminal State", INodeGraphicInfo.FIG_CIRCLE, 16, 16, true);
State ./formalism/FormalismManager.java:418: elem = new NodeFormalism("state", "State", INodeGraphicInfo.FIG_CIRCLE, 16, 16, false);
name ./formalism/FormalismManager.java:121: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:138: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:157: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:174: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:278: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:291: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.NOR, true, false);
name ./formalism/FormalismManager.java:302: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:389: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:404: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
name ./formalism/FormalismManager.java:419: attr = new AttributeFormalism(1,"name", IAttributeGraphicInfo.L1, true, false);
value ./formalism/FormalismManager.java:391: attr = new AttributeFormalism(2,"value", IAttributeGraphicInfo.L2, true, true);
value ./formalism/FormalismManager.java:406: attr = new AttributeFormalism(2,"value", IAttributeGraphicInfo.L2, true, true);
value ./formalism/FormalismManager.java:421: attr = new AttributeFormalism(2,"value", IAttributeGraphicInfo.L2, true, true);
value ./formalism/FormalismManager.java:436: attr = new AttributeFormalism(2,"value", false, true);
initial ./formalism/FormalismManager.java:388: elem = new NodeFormalism("initial_state", "Initial State", INodeGraphicInfo.FIG_DBLCIRCLE, 16, 16, false);
initial ./formalism/FormalismManager.java:393: attr = new AttributeFormalism(3,"initial", IAttributeGraphicInfo.NOR, true, true);
initial ./formalism/FormalismManager.java:398: elem.setAddrIcone16("/icons/initial16.png");
initial ./formalism/FormalismManager.java:399: elem.setAddrIcone24("/icons/initial24.png");
initial ./formalism/FormalismManager.java:408: attr = new AttributeFormalism(3,"initial", IAttributeGraphicInfo.NOR, true, true);
initial ./formalism/FormalismManager.java:423: attr = new AttributeFormalism(3,"initial", IAttributeGraphicInfo.NOR, true, true);
deadlock ./formalism/FormalismManager.java:395: attr = new AttributeFormalism(4,"deadlock", false, true);
deadlock ./formalism/FormalismManager.java:410: attr = new AttributeFormalism(4,"deadlock", false, true);
deadlock ./formalism/FormalismManager.java:425: attr = new AttributeFormalism(4,"deadlock", false, true);
event ./formalism/FormalismManager.java:290: elem = new NodeFormalism("event", "Event", INodeGraphicInfo.FIG_RECT, 24, 8, false);
event ./formalism/FormalismManager.java:327: rule = new Rule("condition - condition", "Une condition ne peut etre reliee qu'a un event ou un cutoff.");
event ./formalism/FormalismManager.java:332: rule = new Rule("event - event", "Un event ne peut etre relie qu'a une condition.");
event ./formalism/FormalismManager.java:333: rule.forbidenRule(prefix, "event", "event");
event ./formalism/FormalismManager.java:337: rule = new Rule("cutoff - event", "Un cutoff ne peut etre relie qu'a une condition.");
event ./formalism/FormalismManager.java:338: rule.forbidenRule(prefix, "cutoff", "event");
event ./formalism/FormalismManager.java:342: rule = new Rule("event - cutoff", "Un cutoff ou un event ne peut etre relie qu'a une condition.");
event ./formalism/FormalismManager.java:343: rule.forbidenRule(prefix, "event", "cutoff");
event ./formalism/FormalismManager.java:433: elem = new ArcFormalism("event", "Event", IArcGraphicInfo.FIG_ARC_SIMPLE, 8, 8, false);
Event ./formalism/FormalismManager.java:290: elem = new NodeFormalism("event", "Event", INodeGraphicInfo.FIG_RECT, 24, 8, false);
Event ./formalism/FormalismManager.java:433: elem = new ArcFormalism("event", "Event", IArcGraphicInfo.FIG_ARC_SIMPLE, 8, 8, false);
label ./formalism/FormalismManager.java:280: attr = new AttributeFormalism(2,"label", IAttributeGraphicInfo.L2, true, true);
label ./formalism/FormalismManager.java:293: attr = new AttributeFormalism(2,"label", IAttributeGraphicInfo.NOR, true, true, "true");
label ./formalism/FormalismManager.java:304: attr = new AttributeFormalism(2,"label", IAttributeGraphicInfo.L2, true, true, "true");
label ./formalism/FormalismManager.java:434: attr = new AttributeFormalism(1,"label", IAttributeGraphicInfo.NOR, true, false);
value ./formalism/FormalismManager.java:391: attr = new AttributeFormalism(2,"value", IAttributeGraphicInfo.L2, true, true);
value ./formalism/FormalismManager.java:406: attr = new AttributeFormalism(2,"value", IAttributeGraphicInfo.L2, true, true);
value ./formalism/FormalismManager.java:421: attr = new AttributeFormalism(2,"value", IAttributeGraphicInfo.L2, true, true);
value ./formalism/FormalismManager.java:436: attr = new AttributeFormalism(2,"value", false, true);
Extension inconnue ./formalism/FormalismManager.java:505: throw new Exception("Extension inconnue");
Creation du modele impossible d'apres le fichier ./formalism/FormalismManager.java:510: throw new Exception("Creation du modele impossible d'apres le fichier");
Extention du fichier ou nom invalide ./formalism/FormalismManager.java:534: throw new Exception("Extention du fichier ou nom invalide");
Extention du fichier ou nom invalide ./formalism/FormalismManager.java:540: throw new Exception("Extention du fichier ou nom invalide");
~~~~~~~~~./Motor.java~~~~~~~~~
FATAL : Module de communication non pret ./Motor.java:71: throw new Exception("FATAL : Module de communication non pret");
ReachabilityGraph ./Motor.java:115: final IModelImpl modelImpl = new ModelImplAdapter(model,getFormalismManager().loadFormalism("ReachabilityGraph"));
Saving the incoming model... ./Motor.java:124: shell.setText("Saving the incoming model...");
~~~~~~~~~~~~~~~~~~ motor ~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~ ui ~~~~~~~~~~~~~~~~~~
~~~~~~~~~./PaletteFactory.java~~~~~~~~~
Nodes ./PaletteFactory.java:63: PaletteDrawer componentsNodeDrawer = new PaletteDrawer("Nodes");
Arcs ./PaletteFactory.java:107: PaletteDrawer componentsArcDrawer = new PaletteDrawer("Arcs");
Tools ./PaletteFactory.java:147: PaletteGroup toolGroup = new PaletteGroup("Tools");
~~~~~~~~~./UserInterface.java~~~~~~~~~
No result ./UserInterface.java:143: labelService = "No result";
Petri net syntax checker ./UserInterface.java:153: if (serviceName.equals("Petri net syntax checker")) {
Syntax-Checker Results ./UserInterface.java:154: labelService = "Syntax-Checker Results";
List of unnamed places. ./UserInterface.java:159: if (result.getHeadDescription().equals("List of unnamed places.")) {
This place is unnamed ./UserInterface.java:160: description = "This place is unnamed";
List of unnamed transitions. ./UserInterface.java:161: } else if (result.getHeadDescription().equals("List of unnamed transitions.")) {
This transition is unnamed ./UserInterface.java:162: description = "This transition is unnamed";
Compute structural bounds ./UserInterface.java:175: } else if (serviceName.equals("Compute structural bounds")) {
Structural Bounds ./UserInterface.java:177: labelService = "Structural Bounds";
Is the net structuraly safe? ./UserInterface.java:188: } else if (serviceName.equals("Is the net structuraly safe?")) {
Structural safety ./UserInterface.java:189: labelService = "Structural safety";
Here are unsafe places ./UserInterface.java:192: if (result.getHeadDescription().equals("Here are unsafe places")) {
Your net is not safe ./UserInterface.java:199: } else if (result.getHeadDescription().equals("Your net is not safe")) {
Your net is not safe ./UserInterface.java:200: String description = "Your net is not safe";
Reasons are given above ./UserInterface.java:201: r.add(new fr.lip6.move.coloane.results.Result(description,"Reasons are given above"));
Is the net structurally bounded? ./UserInterface.java:207: } else if (serviceName.equals("Is the net structurally bounded?")) {
Structural bounds ./UserInterface.java:208: labelService = "Structural bounds";
P-invariants ./UserInterface.java:216: } else if (serviceName.equals("P-invariants")) {
P-invariants ./UserInterface.java:217: labelService = "P-invariants";
T-invariants ./UserInterface.java:238: } else if (serviceName.equals("T-invariants")) {
T-invariants ./UserInterface.java:239: labelService = "T-invariants";
~~~~~~~~~./actions/AuthenticationAction.java~~~~~~~~~
Error during view initialization ./actions/AuthenticationAction.java:36: "Error during view initialization",
The Historic view cannot be opened ./actions/AuthenticationAction.java:37: "The Historic view cannot be opened");
Authentification ./actions/AuthenticationAction.java:42: HistoryView.instance.addText("[?] Authentification -> ");
OK ./actions/AuthenticationAction.java:48: HistoryView.instance.addLine("OK");
Platform ./actions/AuthenticationAction.java:50: MenuManipulation.setEnabled("Platform", "Connect model", true);
Platform ./actions/AuthenticationAction.java:51: MenuManipulation.setEnabled("Platform", "Disconnect model", true);
Connect model ./actions/AuthenticationAction.java:50: MenuManipulation.setEnabled("Platform", "Connect model", true);
Disconnect model ./actions/AuthenticationAction.java:51: MenuManipulation.setEnabled("Platform", "Disconnect model", true);
KO ./actions/AuthenticationAction.java:53: HistoryView.instance.addLine("KO");
~~~~~~~~~./actions/ConnectModelAction.java~~~~~~~~~
Error during view initialization ./actions/ConnectModelAction.java:39: "Error during view initialization",
The Historic view cannot be opened ./actions/ConnectModelAction.java:40: "The Historic view cannot be opened");
Connexion d'un modele ./actions/ConnectModelAction.java:43: System.out.println("Connexion d'un modele");
Connexion d'un modele ./actions/ConnectModelAction.java:44: HistoryView.instance.addLine("[?] Connexion d'un modele");
Echec: Aucun modele ouvert ! ./actions/ConnectModelAction.java:47: HistoryView.instance.addLine("[!] Echec: Aucun modele ouvert !");
Connexion en cours... ./actions/ConnectModelAction.java:54: HistoryView.instance.addText("Connexion en cours... ");
SUCCESS ./actions/ConnectModelAction.java:72: HistoryView.instance.addLine("SUCCESS");
FAILED ./actions/ConnectModelAction.java:77: HistoryView.instance.addLine("FAILED");
Echec: Le modele n'est pas valide ./actions/ConnectModelAction.java:81: HistoryView.instance.addText("[!] Echec: Le modele n'est pas valide");
~~~~~~~~~./actions/DisconnectModelAction.java~~~~~~~~~
Error during view initialization ./actions/DisconnectModelAction.java:40: "Error during view initialization",
The Historic view cannot be opened ./actions/DisconnectModelAction.java:41: "The Historic view cannot be opened");
Deconnexion d'un modele ./actions/DisconnectModelAction.java:44: System.out.println("Deconnexion d'un modele");
Deconnexion d'un modele ./actions/DisconnectModelAction.java:45: HistoryView.instance.addLine("[?] Deconnexion d'un modele");
Echec: Aucun modele ouvert ! ./actions/DisconnectModelAction.java:48: HistoryView.instance.addLine("[!] Echec: Aucun modele ouvert !");
Deconnexion en cours... ./actions/DisconnectModelAction.java:55: HistoryView.instance.addText("Deconnexion en cours... ");
Connect model ./actions/DisconnectModelAction.java:61: MenuManipulation.setEnabled("Platform", "Connect model", true);
Disconnect model ./actions/DisconnectModelAction.java:62: MenuManipulation.setEnabled("Platform", "Disconnect model", false);
SUCCESS ./actions/DisconnectModelAction.java:60: HistoryView.instance.addLine("SUCCESS");
FAILED ./actions/DisconnectModelAction.java:65: HistoryView.instance.addLine("FAILED");
Echec: Le modele n'est pas valide ./actions/DisconnectModelAction.java:69: HistoryView.instance.addText("[!] Echec: Le modele n'est pas valide");
~~~~~~~~~./actions/DumpAction.java~~~~~~~~~
Please open a model to dump ./actions/DumpAction.java:26: Coloane.showErrorMsg("Please open a model to dump");
~~~~~~~~~./actions/ImportExportCAMI.java~~~~~~~~~
Please open a model to export ./actions/ImportExportCAMI.java:56: Coloane.showErrorMsg("Please open a model to export ");
Please save model before exporting ! ./actions/ImportExportCAMI.java:66: Coloane.showWarningMsg("Please save model before exporting !");
~~~~~~~~~./commands/ArcDeleteCmd.java~~~~~~~~~
delete arc ./commands/ArcDeleteCmd.java:27: setLabel(" delete arc ");
~~~~~~~~~./commands/ArcReconnectCmd.java~~~~~~~~~
move connection startpoint ./commands/ArcReconnectCmd.java:151: setLabel("move connection startpoint");
move connection endpoint ./commands/ArcReconnectCmd.java:160: setLabel("move connection endpoint");
~~~~~~~~~./commands/NodeDeleteCmd.java~~~~~~~~~
Impossible de supprimer le noeud. L'appel de la commande n'est pas valide ./commands/NodeDeleteCmd.java:42: throw new BuildException("Impossible de supprimer le noeud. L'appel de la commande n'est pas valide");
Delete a node ./commands/NodeDeleteCmd.java:46: setLabel("Delete a node");
~~~~~~~~~./dialogs/AuthenticationDialog.java~~~~~~~~~
password ./dialogs/AuthenticationDialog.java:33: public static final String PASSWORD_TAG = "password";
login ./dialogs/AuthenticationDialog.java:36: public static final String LOGIN_TAG = "login";
Identifiant ou mot de passe invalide ./dialogs/AuthenticationDialog.java:52: private static final String MSG_AUTH_ERROR = "Identifiant ou mot de passe invalide";
Vous devez fournir un nom d'utilisateur ./dialogs/AuthenticationDialog.java:55: private static final String MSG_LOGIN_ERROR = "Vous devez fournir un nom d'utilisateur";
Vous devez fournir un mot de passe ./dialogs/AuthenticationDialog.java:58: private static final String MSG_PASS_ERROR = "Vous devez fournir un mot de passe";
Erreur globale ./dialogs/AuthenticationDialog.java:61: private static final String MSG_GNRL_ERROR = "Erreur globale";
Login : ./dialogs/AuthenticationDialog.java:91: new Label(compo, SWT.NULL).setText("Login :");
Password : ./dialogs/AuthenticationDialog.java:97: new Label(compo, SWT.NULL).setText("Password :");
Framekit IP : ./dialogs/AuthenticationDialog.java:105: new Label(compo, SWT.NULL).setText("Framekit IP :");
Framekit Port : ./dialogs/AuthenticationDialog.java:112: new Label(compo, SWT.NULL).setText("Framekit Port :");
Erreur: ./dialogs/AuthenticationDialog.java:149: Coloane.showErrorMsg("Erreur: " + erreur.getMessage());
name ./dialogs/AuthenticationDialog.java:245: tagged.setData("name", data); //$NON-NLS-1$
~~~~~~~~~./menus/GraphicalMenu.java~~~~~~~~~
Coloane Services ./menus/GraphicalMenu.java:75: if (mi[i].getText().contentEquals("Coloane Services")) {
Coloane Services ./menus/GraphicalMenu.java:112: if (mi.getText().equals("Coloane Services"))
Coloane Services ./menus/GraphicalMenu.java:125: if (mi.getText().equals("Coloane Services"))
~~~~~~~~~./menus/MenuManipulation.java~~~~~~~~~
Coloane Services ./menus/MenuManipulation.java:22: if(item.getText().equals("Coloane Services"))
Coloane Services ./menus/MenuManipulation.java:65: if(item.getText().equals("Coloane Services"))
~~~~~~~~~./model/ArcImplAdapter.java~~~~~~~~~
Impossible de reconnecter l'arc ./model/ArcImplAdapter.java:263: throw new BuildException("Impossible de reconnecter l'arc");
valuation ./model/ArcImplAdapter.java:343: if (this.arc.getNthAttr(i).getName().equalsIgnoreCase("valuation")) {
label ./model/ArcImplAdapter.java:357: if (this.arc.getNthAttr(i).getName().equalsIgnoreCase("label")) {
~~~~~~~~~./model/ModelImplAdapter.java~~~~~~~~~
Source ou destination de l'arc manquante ./model/ModelImplAdapter.java:171: throw new Exception("Source ou destination de l'arc manquante");
Ajout impossible: L'identifiant du noeud existe deja ./model/ModelImplAdapter.java:271: "Ajout impossible: L'identifiant du noeud existe deja");
Ajout impossible: L'identifiant du noeud existe deja ./model/ModelImplAdapter.java:314: "Ajout impossible: L'identifiant du noeud existe deja");
Erreur lors de l'ajout d'un noeud au modele ./model/ModelImplAdapter.java:281: "Erreur lors de l'ajout d'un noeud au modele");
Erreurs lors de la suppression d'un noeud du modele ./model/ModelImplAdapter.java:299: "Erreurs lors de la suppression d'un noeud du modele");
Ajout impossible: L'identifiant du noeud existe deja ./model/ModelImplAdapter.java:271: "Ajout impossible: L'identifiant du noeud existe deja");
Ajout impossible: L'identifiant du noeud existe deja ./model/ModelImplAdapter.java:314: "Ajout impossible: L'identifiant du noeud existe deja");
~~~~~~~~~./model/NodeImplAdapter.java~~~~~~~~~
Erreur lors de l'ajout d'un arc entrant au modele ./model/NodeImplAdapter.java:188: throw new BuildException("Erreur lors de l'ajout d'un arc entrant au modele");
Erreur lors de l'ajout d'un arc sortant au modele ./model/NodeImplAdapter.java:202: throw new BuildException("Erreur lors de l'ajout d'un arc sortant au modele");
~~~~~~~~~./panels/HistoryView.java~~~~~~~~~
Copy ./panels/HistoryView.java:114: copyAction.setText("Copy");
Copy ./panels/HistoryView.java:115: copyAction.setToolTipText("Copy selected text");
Copy selected text ./panels/HistoryView.java:115: copyAction.setToolTipText("Copy selected text");
Select All ./panels/HistoryView.java:127: selectAllAction.setText("Select All");
Select all text in history window ./panels/HistoryView.java:128: selectAllAction.setToolTipText("Select all text in history window");
Find... ./panels/HistoryView.java:137: findAction.setText("Find...");
Find ./panels/HistoryView.java:138: findAction.setToolTipText("Find text...");
Find text... ./panels/HistoryView.java:138: findAction.setToolTipText("Find text...");
~~~~~~~~~./wizards/ModelCreationPage.java~~~~~~~~~
Attach your model. ./wizards/ModelCreationPage.java:38: setTitle("Attach your model.");
Choose a modeling project to store your model to. ./wizards/ModelCreationPage.java:39: setDescription("Choose a modeling project to store your model to.");
Coloane has not been launched correctly... ./wizards/ModelCreationPage.java:73: setErrorMessage("Coloane has not been launched correctly...");
Cannot create file 'file' ./wizards/ModelCreationPage.java:86: setErrorMessage("Cannot create file 'file'");
Impossible de creer le fichier ./wizards/ModelCreationPage.java:87: System.err.println("Impossible de creer le fichier");
Impossible d'ouvrir le fichier ./wizards/ModelCreationPage.java:100: System.err.println("Impossible d'ouvrir le fichier");
~~~~~~~~~./wizards/NewModelWizard.java~~~~~~~~~
Build a new model ! ./wizards/NewModelWizard.java:42: setWindowTitle("Build a new model !");
Le formalisme choisi est : ./wizards/NewModelWizard.java:69: System.out.println("Le formalisme choisi est : "+formalismName);
~~~~~~~~~./wizards/NewProjectWizard.java~~~~~~~~~
Model project ./wizards/NewProjectWizard.java:40: String[] natureIds = { "Model project" };
Create a new modeling project... ./wizards/NewProjectWizard.java:67: setWindowTitle("Create a new modeling project...");
~~~~~~~~~./wizards/ProjectCreationPage.java~~~~~~~~~
New modeling project ./wizards/ProjectCreationPage.java:10: setTitle("New modeling project");
Create a modeling project to manage all your model files. ./wizards/ProjectCreationPage.java:11: setDescription("Create a modeling project to manage all your model files.");
~~~~~~~~~./wizards/SelectFormalismPage.java~~~~~~~~~
Select a formalism for your model ./wizards/SelectFormalismPage.java:37: setTitle("Select a formalism for your model");
Select a formalism for your model ./wizards/SelectFormalismPage.java:57: label.setText("Select a formalism for your model: ");
Your model must implement one of the available models shown below : ./wizards/SelectFormalismPage.java:38: setDescription("Your model must implement one of the available models shown below :");
Select a formalism for your model: ./wizards/SelectFormalismPage.java:57: label.setText("Select a formalism for your model: ");
~~~~~~~~~~~~~~~~~~ ui ~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~ coloane ~~~~~~~~~~~~~~~~~~~~~~~~~~~
